<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react_fiber</title>
      <link href="/2023/06/05/react-fiber/"/>
      <url>/2023/06/05/react-fiber/</url>
      
        <content type="html"><![CDATA[<h1 id="fiber之前"><a href="#fiber之前" class="headerlink" title="fiber之前"></a>fiber之前</h1>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react18源码解读</title>
      <link href="/2023/06/05/react-react18/"/>
      <url>/2023/06/05/react-react18/</url>
      
        <content type="html"><![CDATA[<h1 id="一、写在开头"><a href="#一、写在开头" class="headerlink" title="一、写在开头"></a>一、写在开头</h1><p>首先让我们从源头开始出发</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        hello&lt;span style=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">&gt;world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react整体渲染过程主要用到了两个方法，即 <code>createRoot</code> 和 <code>render</code> 方法，createRoot方法主要是创建根 Fiber 与其真实DOM根节点之间的联系；而<code>render</code> 方法负责Fiber树的生成以及将Fiber树变成真实DOM树并渲染的一个过程。</p><h1 id="二、createRoot方法主要做了什么？"><a href="#二、createRoot方法主要做了什么？" class="headerlink" title="二、createRoot方法主要做了什么？"></a>二、createRoot方法主要做了什么？</h1><h2 id="2-1-大致流程"><a href="#2-1-大致流程" class="headerlink" title="2.1  大致流程"></a>2.1  大致流程</h2><ol><li>通过<code>createContainer</code> 方法创建<strong>FiberNode</strong>的一个根实例，即<font color="#f00">未初始化的根Fiber</font>。</li><li>建立 <code>FiberRootNode</code>与 <code>HostRootFiber</code>之间的联系。</li><li>初始化循环队列。</li><li>返回 <code>FiberRootNode</code>。</li></ol><blockquote><p>附上完整的实现方法</p></blockquote><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里的root即构造函数FiberRootNode的一个实例,相当于根Fiber</span>    <span class="token comment">// FiberRootNode里面有一个containerInfo属性，this.containerInfo ==&gt; div#root</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Fiber挂载到ReactDOMRoot的实例的一个属性_internalRoot上</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactDOMRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#f00">注意：下面的代码是<strong>createRoot</strong>核心做的事情</font></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// containerInfo ==&gt; div#root</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// HostRoot指的就是根节点div#root,HostRootFiber代表根Fiber</span>    <span class="token keyword">const</span> uninitializedFiber <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根容器的current指向当前的根容器(根fiber)现在正在显示或者已经渲染好的fiber树</span>    root<span class="token punctuation">.</span>current <span class="token operator">=</span> uninitializedFiber<span class="token punctuation">;</span>    <span class="token comment">// 根fiber的stateNode,也就是真实dom节点指向FiberRootNode</span>    uninitializedFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 开始初始化更新队列</span>    <span class="token function">initialUpdateQueue</span><span class="token punctuation">(</span>uninitializedFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#08e">根Fiber大致长这个样↓</font></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/** * * @param {*} tag fiber的类型 函数组件0 类组件1 原生组件5 根元素3 * @param {*} pendingProps 新属性，等待处理或者说生效的属性 * @param {*} key 唯一标识 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// fiber类型，来自于虚拟DOM节点的type, span div p</span>    <span class="token comment">// 每个虚拟DOM =&gt; Fiber节点 =&gt; 真实DOM</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 此fiber对应的真实dom节点 h1 =&gt; 真实的h1 DOM</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向父节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个子节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向next弟弟节点</span>    <span class="token comment">// fiber哪来的？通过虚拟DOM节点创建，虚拟DOM会提供pendingProps用来创建fiber节点的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span> <span class="token comment">// 等待生效的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 已经生效的属性</span>    <span class="token comment">// 每个fiber还会有自己的状态，每一种fiber状态的类型是不一样的</span>    <span class="token comment">// 类组件对应的fiber存的就是类的实例的状态，HostRoot存的就是要渲染的元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 每个fiber身上可能还有更新队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>undateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 自身副作用的标识，表示要针对此fiber节点的进行何种操作</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span> <span class="token comment">// 自己的副作用</span>    <span class="token comment">// 子节点对应的副作用使用标识，主要是为了提升性能(eg:如果副作用标识是0，那么后面的子节点就不用递归计算了)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subtreeFlags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>    <span class="token comment">// 替身(相当于使用了双缓存技术或者说是预加载技术)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 默认索引值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>HostRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是初始化循环队列的方法</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initialUpdateQueue</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个新的更新队列</span>    <span class="token comment">// pending其实是一个循环链表</span>    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">{</span>        shared<span class="token operator">:</span> <span class="token punctuation">{</span>            pending<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-图文解析"><a href="#2-2-图文解析" class="headerlink" title="2.2 图文解析"></a>2.2 图文解析</h2><p><img src="/../images/01%E3%80%81createFiber.jpg" alt="createfiber结构图"></p><p><img src="/../images/02%E3%80%81createRoot%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="createfiber细节图"></p>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序章</title>
      <link href="/2023/05/20/hello-world/"/>
      <url>/2023/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h1><p>不知不觉从19年毕业直到现在，从事着web前端开发这块也有好几年的时间了。</p><p>在此期间大大小小的笔记也做了蛮多，</p><p>从最初用的有道笔记、到现在用到的csdn、语雀、知乎、github，</p><p>才发现自己写的东西已经不知道去哪个平台回顾了（主要是懒 ^ ^）</p><p>为此思来思去，经过这几天的折腾，终于把自己的个人网站搭建起来了；</p><p>接下来的这几个月，我会针对于自己所学的知识把大前端各个分支进行分类与整合并发布到这个网站上来。</p><p>学习与写博客是一件持之以恒的事情，</p><p>这也是不断督促自己前进的一种方式；</p><p>就让我们开始行动起来吧~</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'here we go'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
