<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第04章：数组</title>
      <link href="/2024/04/25/04-c-yu-yan/di-04-zhang-shu-zu/"/>
      <url>/2024/04/25/04-c-yu-yan/di-04-zhang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="第04章-数组"><a href="#第04章-数组" class="headerlink" title="第04章_数组"></a>第04章_数组</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="本章专题脉络"><a href="#本章专题脉络" class="headerlink" title="本章专题脉络"></a>本章专题脉络</h2><p><img src="/../../images/04/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E7%BB%84.png"></p><h2 id="1、数组的概述"><a href="#1、数组的概述" class="headerlink" title="1、数组的概述"></a>1、数组的概述</h2><h3 id="1-1-为什么需要数组"><a href="#1-1-为什么需要数组" class="headerlink" title="1.1 为什么需要数组"></a>1.1 为什么需要数组</h3><p><strong>需求分析1：</strong></p><p>需要统计某公司50个员工的工资情况，例如计算平均工资、找到最高工资等。用之前知识，首先需要声明<code>50个变量</code>来分别记录每位员工的工资，这样会很麻烦。因此我们可以将所有的数据全部存储到一个容器中统一管理，并使用容器进行计算。</p><p><strong>需求分析2：</strong></p><p><img src="/../../images/04/snipaste_20220317_000101.jpg"></p><p>容器的概念：</p><ul><li><strong>生活中的容器：</strong>水杯（装水等液体），衣柜（装衣服等物品），集装箱（装货物等）。</li><li><strong>程序中的容器：</strong>将多个数据存储到一起，每个数据称为该容器的元素。</li></ul><h3 id="1-2-数组的概念"><a href="#1-2-数组的概念" class="headerlink" title="1.2 数组的概念"></a>1.2 数组的概念</h3><ul><li><p>数组(Array)，是多个<code>相同类型</code>数据按<code>一定顺序</code>排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p></li><li><p>数组中的概念</p><ul><li>数组名</li><li>下标（或索引、index）</li><li>元素</li><li>数组的长度</li></ul></li></ul><p><img src="/../../images/04/image-20220317000952499.png" alt="image-20220317000952499"></p><p><strong>数组的特点：</strong></p><ul><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>创建数组对象会在内存中开辟一整块<code>连续的空间</code>。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li>数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>。</li><li>数组名中引用的是这块连续空间的首地址。</li></ul><h3 id="1-3-数组的分类"><a href="#1-3-数组的分类" class="headerlink" title="1.3 数组的分类"></a>1.3 数组的分类</h3><p><strong>按照数组维度分：</strong></p><ul><li>一维数组：存储一组数据</li><li>二维数组：存储多组数据，相当于二维表，一行代表一组数据。每一行长度可以不同。</li><li>三维数组、四维数组、….</li></ul><p><img src="/../../images/04/image-20230808152439557.png" alt="image-20230808152439557"></p><p><strong>按照元素的数据类型分：</strong></p><ul><li>int类型数组</li><li>char类型数组</li><li>double类型数组</li><li>….</li></ul><h2 id="2、一维数组的定义"><a href="#2、一维数组的定义" class="headerlink" title="2、一维数组的定义"></a>2、一维数组的定义</h2><h3 id="2-1-数组的定义方式1"><a href="#2-1-数组的定义方式1" class="headerlink" title="2.1 数组的定义方式1"></a>2.1 数组的定义方式1</h3><p>数组通过变量名后加方括号表示，方括号里面是数组可以容纳的成员数量（即长度）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//数组 arr ，里面包含10个成员，每个成员都是 int 类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，声明数组时，必须给出数组的大小。</p><p><img src="/../../images/04/image-20230809143245377.png"></p><h3 id="2-2-数组元素的调用"><a href="#2-2-数组元素的调用" class="headerlink" title="2.2 数组元素的调用"></a>2.2 数组元素的调用</h3><ul><li><p>格式：<code>数组名[下标]</code></p></li><li><p>数组的<code>下标从0开始</code>，用“int arr[10];”定义数组，则<code>最大下标值为9</code>，不存在数组元素arr[10]。</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>       <span class="token comment">//对该位置数组元素进行赋值</span><span class="token keyword">int</span> score <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//调用此位置的元素值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>数组角标越界：</strong></p><p>假设数组有n个元素，如果使用的数组的下标小于0，或者大于n-1，就是数组越界访问了，超出了数组合法空间的访问。</p><p>C语言不做数组下标越界的检查，编译器也不一定报错，但是编译器不报错，并不意味着程序就是正确！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> scores<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>scores<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>说明：数组 scores 只有20个成员，因此 scores[20] 这个位置是不存在的。但是，引用这个位置并不会报错。赋值操作会导致紧跟在 scores 后面的那块内存区域被赋值(这实际是其它变量的区域)，因此不知不觉就更改了其它变量的值。这很容易引发错误，而且难以发现。</p></blockquote><h3 id="2-3-关于长度"><a href="#2-3-关于长度" class="headerlink" title="2.3 关于长度"></a>2.3 关于长度</h3><p><strong>数组的字节长度</strong></p><p>sizeof 运算符会返回整个数组的字节长度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组的字节长度为：%zd\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>数组的长度</strong></p><p>在定义数组时，需要指定数组中元素的个数，方括号中的常量表达式用来表示元素的个数，即数组长度。</p><p>由于数组成员都是同一个类型，每个成员的字节长度都是一样的，所以数组整体的字节长度除以某个数组元素的字节长度，就可以得到数组的成员数量。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//数组中元素的个数：</span><span class="token keyword">int</span> arrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组的字节长度为：%zu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 40</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组每个元素的字节长度为：%zu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组的长度为：%zu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>复习： sizeof 返回值的数据类型是 <code>size_t</code> ，所以 sizeof(a) / sizeof(a[0]) 的数据类型也是size_t 。在 printf() 里面的占位符，要用 %zd 或 %zu 。</p></blockquote><p>注意：数组一旦声明/定义了，其<strong>长度就固定了，不能动态变化</strong>。</p><h3 id="2-4-数组的遍历"><a href="#2-4-数组的遍历" class="headerlink" title="2.4 数组的遍历"></a>2.4 数组的遍历</h3><p>将数组中的每个元素分别获取出来，就是<code>遍历</code>。for循环与数组的遍历是绝配。</p><p>举例1：声明长度为10的int类型数组，给数组元素依次赋值为0,1,2,3,4,5,6,7,8,9，并遍历数组所有元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//给数组中的每个元素赋值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//对数组元素arr[0]~arr[9]赋值</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历数组中的元素</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历数组中的元素：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//输出arr[0]~arr[9]共10个数组元素</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-数组的其它定义方式"><a href="#2-5-数组的其它定义方式" class="headerlink" title="2.5 数组的其它定义方式"></a>2.5 数组的其它定义方式</h3><p><strong>定义方式2：</strong>(定义方式1在2.1节讲的)</p><p>数组可以在声明时，使用大括号，同时对每一个成员赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>变形形式1：</code>C 语言允许省略方括号里面的数组成员数量，这时根据大括号里面的值的数量，自动确定数组的长度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//数组 arr 的长度，将根据大括号里面的值的数量，确定为 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>变形形式2：</code></p><p>对数组部分元素赋初值：如果大括号里面的值，少于数组的成员数量，那么未赋值的成员自动初始化为 0 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>变形方式3</code>：</p><p>将整个数组的每一个成员都设置为零，最简单的方式如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>错误方式：</code></p><p>使用大括号赋值时，大括号里面的值不能多于数组的长度，否则编译时会报错。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>定义方式3：</strong>数组初始化时，可以指定为哪些位置的成员赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//非角标2、5、14的位置自动赋值为0</span><span class="token comment">//等同于</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//指定位置的赋值可以不按角标从小到大的顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>变形形式1：</code>指定位置的赋值与顺序赋值，可以结合使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//角标0、5、6、10、11的位置被赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>变形形式2：</code>省略成员数量时，如果同时采用指定位置的赋值，那么数组长度将是最大的指定位置再加1。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//此时数组的长度是10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、一维数组内存分析"><a href="#3、一维数组内存分析" class="headerlink" title="3、一维数组内存分析"></a>3、一维数组内存分析</h2><h3 id="3-1-数组内存图"><a href="#3-1-数组内存图" class="headerlink" title="3.1 数组内存图"></a>3.1 数组内存图</h3><p>针对于如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的内存结构：</p><p><img src="/../../images/04/image-20230811192849889.png"></p><p>说明：</p><p>1）数组名，记录该数组的首地址 ，即 a[0]的地址。</p><p>2）数组的各个元素是连续分布的， 假如 a[0] 地址是0x1122，则<code>a[1]地址= a[0]的地址+int字节数(4)</code> = 0x1122 + 4 = 0x1126，后面 <code>a[2] 地址 = a[1]地址 + int 字节数(4)</code> = 0x1126 + 4 = 0x112A，依次类推…</p><h3 id="3-2-注意事项"><a href="#3-2-注意事项" class="headerlink" title="3.2 注意事项"></a>3.2 注意事项</h3><p><strong>C 语言规定，数组变量一旦声明，数组名指向的地址就不可更改。</strong>因为声明数组时，编译器会自动为数组分配内存地址，这个地址与数组名是绑定的，不可更改。</p><p>因此，当数组定义后，再用大括号重新赋值，是不允许的。下面的代码会报错。</p><p>错误举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">3490</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>错误举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>错误举例3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> ints<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ints <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这也导致不能将一个数组名赋值给另外一个数组名。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 写法一</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 报错</span><span class="token comment">// 写法二</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种写法都会更改数组 b 的地址，导致报错。</p><h3 id="3-3-变长数组"><a href="#3-3-变长数组" class="headerlink" title="3.3 变长数组"></a>3.3 变长数组</h3><p>数组声明的时候，数组长度除了使用常量，也可以使用变量或表达式来指定数组的大小。这叫做<code>变长数组</code>（variable-length array，简称 VLA）。</p><p><strong>方式1：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>变长数组的根本特征是数组长度只有<code>运行时才能确定</code>。它的好处是程序员不必在开发时，随意为数组指定一个估计的长度，程序可以在运行时为数组分配精确的长度。</p><p>任何长度需要运行时才能确定的数组，都是变长数组。比如，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a2<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a3<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：变长数组在C99标准中被引入，在C11标准中被标记为可选特性。某些编译器可能不支持变长数组，或者可能有特定的限制和行为。</p></blockquote><p><strong>方式2：</strong></p><p>如果你的编译器版本不支持变长数组，还可以考虑使用动态内存分配（使用<code>malloc()函数</code> ）来创建动态大小的数组。</p><p>分配：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>length <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>释放：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、一维数组的应用"><a href="#4、一维数组的应用" class="headerlink" title="4、一维数组的应用"></a>4、一维数组的应用</h2><h3 id="4-1-数值型数组特征值统计"><a href="#4-1-数值型数组特征值统计" class="headerlink" title="4.1 数值型数组特征值统计"></a>4.1 数值型数组特征值统计</h3><p>这里的特征值涉及到：平均值、最大值、最小值、总和等</p><p>举例1：定义一个int型的一维数组，包含10个元素，然后求出数组中的最大值，最小值，总和，平均值，并输出出来。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于记录数组的最大值</span>    <span class="token keyword">int</span> arrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数组中元素的个数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值为：%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数组的最小值</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最小值为：%d\n"</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数组的总和</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"总和为：%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数组的平均值</span>    <span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> arrLen<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"平均值为：%d\n"</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：评委打分</p><p>分析以下需求，并用代码实现：</p><p>（1）在编程竞赛中，有10位评委为参赛的选手打分，分数分别为：5，4，6，8，9，0，1，2，7，3</p><p>（2）求选手的最后得分（去掉一个最高分和一个最低分后其余8位评委打分的平均值）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> scores<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录最高分</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录最低分</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录总分</span>    <span class="token keyword">int</span> arrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录数组长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">&gt;</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min <span class="token operator">=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//计算平均分</span>    <span class="token keyword">double</span> avg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arrLen <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选手去掉最高分和最低分之后的平均分为：%.2lf\n"</span> <span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-数组的复制"><a href="#4-2-数组的复制" class="headerlink" title="4.2 数组的复制"></a>4.2 数组的复制</h3><p>由于数组名是指针，所以复制数组不能简单地复制数组名。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的写法，结果不是将数组 a 复制给数组 b ，而是让 a 和 b 指向同一个数组。</p><p><strong>正确方式1：使用循环</strong></p><p>这是复制数组最简单的方法，将数组元素逐个进行复制。比如，将数组 a 的成员逐个复制给数组 b。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 复制数组 a 到数组 b</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 打印数组 b 的内容</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"复制后的数组 b："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确方式2：使用 memcpy() 函数</strong></p><p> memcpy() 函数定义在头文件 string.h 中，直接把数组所在的那一段内存，再复制一份。3个参数依次为：<code>目标数组</code>、<code>源数组</code>以及<code>要复制的字节数</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 memcpy 函数复制数组 a 到数组 b</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印数组 b 的内容</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"复制后的数组 b："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两种方式对比：</strong></p><p>下面是对两种方式进行比较的一些要点：</p><ol><li>循环复制：<ul><li>优点：<code>简单直观</code>，容易理解和实现。不需要引入额外的头文件。</li><li>缺点：需要编写循环代码来遍历数组并逐个赋值，相对而言可能<code>稍显繁琐</code>。不适用于复制大型数组或复杂数据结构。</li></ul></li><li>memcpy函数复制：<ul><li>优点：使用标准库提供的函数，可以实现<code>快速且高效</code>的内存复制。适用于<code>大型数组或复杂数据</code>结构的复制。可以直接复制字节数，不需要遍历数组。</li><li>缺点：需要包含 <code>&lt;string.h&gt;</code> 头文件。对于简单的数组复制，可能有些<code>过于繁重</code>。</li></ul></li></ol><h3 id="4-3-数组元素的反转"><a href="#4-3-数组元素的反转" class="headerlink" title="4.3 数组元素的反转"></a>4.3 数组元素的反转</h3><p><strong>实现思想：</strong>数组对称位置的元素互换。</p><p>方式1：</p><p><img src="/../../images/04/image-20221117195931777.png"></p><p>代码实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组的长度</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"反转后的数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式2：</p><p><img src="/../../images/04/1688562327054.png" alt="1688562327054"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组的长度</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 起始指针</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 结尾指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 交换起始指针和结尾指针指向的元素</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 更新指针位置</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"反转后的数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-char型数组与字符串"><a href="#4-4-char型数组与字符串" class="headerlink" title="4.4 char型数组与字符串"></a>4.4 char型数组与字符串</h3><h4 id="4-4-1-char型数组"><a href="#4-4-1-char型数组" class="headerlink" title="4.4.1 char型数组"></a>4.4.1 char型数组</h4><p>字符型数组，顾名思义，数组元素的数据类型为字符型的数组。</p><p>一方面，可以看做普通的数组，初始化、常用操作如前所述。比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">,</span><span class="token char">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一方面，字符型数组可以用于存储字符串。</p><h4 id="4-4-2-字符串的使用"><a href="#4-4-2-字符串的使用" class="headerlink" title="4.4.2 字符串的使用"></a>4.4.2 字符串的使用</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"helloworld"</span><span class="token string">"abc"</span><span class="token string">"a"</span><span class="token string">"123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种由双引号引起来的一串字符称为字符串字面值(String Literal)，简称字符串(String)。</p><p>通常把<code>""</code>称为<code>空串</code>，即一个不包含任意字符的字符串；而<code>" "</code>则称为<code>空格串</code>，是包含一个空格字符的字符串。二者不能等同。</p><p>C语言没有专门用于存储字符串的变量类型，字符串都被存储在char类型的数组中。在字符串结尾，C 语言会自动添加一个<code>'\0' </code>的转义字符作为字符串结束的标志，所以字符数组也必须以 ‘\0’字符结束。</p><p><strong>声明方式1：标准写法</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//显式以'\0'为最后一个字符元素结束</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'e'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">,</span><span class="token char">' '</span><span class="token punctuation">,</span><span class="token char">'w'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">,</span><span class="token char">'r'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'d'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果一个字符数组声明如下，由于必须留一个位置给 <code>\0</code> ，所以最多只能容纳9个字符的字符串。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>声明方式2：简化写法</strong></p><p>字符串写成数组的形式，是非常麻烦的，C 语言提供了一种简化写法。双引号之中的字符，会被自动视为字符数组。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//自动在末尾添加'\0'字符</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//注意使用双引号，非单引号</span><span class="token comment">//或者</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>   <span class="token comment">//可以省略一对{}来初始化数组元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于字符数组的长度可以让编译器自动计算，所以声明时可以省略字符数组的长度：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//或者</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>双引号里面的字符串，不用自己添加结尾字符 \0 ，C 语言会自动添加。所以，代码中数组 str1或str2的元素依次为 ‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘ ‘, ‘w’, ‘o’, ‘r’, ‘l’, ‘d’, ‘\0’。</p><p><strong>字符串对应数组的长度</strong></p><p>对应的存储为：</p><p><img src="/../../images/04/1689220044896.png" alt="1689220044896"></p><p>其中，数组由连续的存储单元组成，字符串中的字符被存储在相邻的存储单元中，每个单元存储一个字符。所以，上述两个数组的长度不是11，而是12。</p><p><strong>字符串的长度</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> nation<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"China"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组nation的前5个元素为: ′C′,′h′,′i′,′n′,′a′，第6个元素为′\0′，后4个元素也自动设定为空字符。</p><p> <img src="/../../images/04/image-20230527130601936.png" alt="image-20230527130601936"></p><blockquote><p>注意：在计算字符串长度的时候，’\0’ 是结束标志，不算作字符串内容。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span>    <span class="token comment">//需要加载此头文件</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> nation<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"China"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>区分：’\0’、0、’0’</strong></p><p>字符 ‘\0’ 不同于字符 ‘0’ ，前者的ASCII 码是0（二进制形式 00000000 ），后者的 ASCII 码是48（二进制形式 00110000 ）。</p><p><strong>练习1：字符数组、字符串的长度</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">//声明1</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token comment">//声明2</span><span class="token keyword">char</span> s3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>   <span class="token comment">//声明3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于声明1：赋给的元素的个数小于该数组的长度，则会自动在后面加 ‘\0’, 表示字符串结束。所以，字符数组 s1 的长度是 50 ，但是字符串“hello”的实际长度只有5（不包含结尾符号 ‘\0’ ），所以后面空出来的45个位置，都会被初始化为 ‘\0’。</p><p>对于声明2：字符数组 s2 的长度是 6（包含结尾符号 ‘\0’ ），但是字符串“hello”的实际长度只有5。</p><p>对于声明3：赋给的元素的个数等于该数组的长度，则不会自动添加 ‘\0’。但字符串要求以’\0’结束，所以这种写法是错误的，要避免。</p><p><strong>练习2：比较”x”和’x’的不同</strong></p><ul><li><p>书写形式不同：字符串常量用双引号，字符常量用单引号。</p></li><li><p>存储空间不同：在内存中，字符常量只占用一个字节的存储空间，而字符串存储时自动加一个结束标记’\0’，所以’x’占用1个字节，而”x”占用2个字节。</p><p><img src="/../../images/04/1689220271310.png" alt="1689220271310"></p></li><li><p>二者的操作也不相同。例如，可对字符常量进行加减运算，字符串常量则不能。</p></li></ul><p><strong>练习3：输出字符数组</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"China\nBeijing"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 【中央财经大学2018研】若有定义和语句：char s[10]; s=”abcd”; printf(“%s\n”,s);，则结果是（　）。<br> A．输出abcd@#$<br> B．输出a<br> C．输出abcd<br> D．编译不通过</p><p> 【答案】D</p><p> 【解析】在定义一维字符数组时，s为数组名，指向数组首元素的地址，为地址常量，不可更改，因此语句s＝”abcd”是非法的，编译不会通过。</p></blockquote><h2 id="5、多维数组"><a href="#5、多维数组" class="headerlink" title="5、多维数组"></a>5、多维数组</h2><h3 id="5-1-理解"><a href="#5-1-理解" class="headerlink" title="5.1 理解"></a>5.1 理解</h3><p>二维数组、三维数组、…都称为多维数组。本节主要讲解二维数组，三维及以上的数组，以此类推即可。</p><p>举例：公司有3个攻坚小分队，每队有6名同事，要把这些同事的工资用数组保存起来以备查看。</p><p><img src="/../../images/04/1688563352491.png" alt="1688563352491"></p><p>此时建立数组salary用于存储工资，它应当是二维的。第一维用来表示第几分队，第二维用来表示第几个同事。例如用<code>salary2,3</code>表示角标2对应分队的角标3对应队员的工资。</p><blockquote><p>对于二维数组的理解，可以看作是由一维数组嵌套而成的。即一维数组array1又作为另一个一维数组array2的元素而存在。</p></blockquote><h3 id="5-2-二维数组的定义方式1"><a href="#5-2-二维数组的定义方式1" class="headerlink" title="5.2 二维数组的定义方式1"></a>5.2 二维数组的定义方式1</h3><p><strong>定义方式1：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//二维数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二维数组a可看成由三个一维数组构成，它们的数组名分别为 a[0]、a[1]、a[2]。这三个一维数组各有 4 个元素，如，一维数组 a[0] 的元素为 <code>a[0][0]</code>、<code>a[0][1]</code>、<code>a[0][2]</code>、<code>a[0][3]</code>。二维数组a共有12个成员（3 x 4 = 12）。</p><p><img src="/../../images/04/image-20230808154409706.png" alt="image-20230808154409706"></p><p>也可以简化理解为：</p><p><img src="/../../images/04/image-20230818150550203.png"></p><p>二维数组，常称为<code>矩阵(matrix)</code>。把二维数组写成<code>行(row)</code>和<code>列(column)</code>的排列形式，可以形象化地理解二维数组的逻辑结构。</p><p>三维数组如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//三维数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>技巧：C 语言允许声明多维数组，有多少个维度，就用多少个方括号，比如二维数组就使用两个方括号。</p></blockquote><p><strong>错误方式：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//在一对方括号内不能写两个下标</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-二维数组的内存分析"><a href="#5-3-二维数组的内存分析" class="headerlink" title="5.3 二维数组的内存分析"></a>5.3 二维数组的内存分析</h3><p>用<code>矩阵形式</code>（如3行4列形式）表示二维数组，是<code>逻辑</code>上的概念，能形象地表示出行列关系。而在<code>内存</code>中，各元素是连续存放的，不是二维的，是<code>线性</code>的。</p><p>C语言中，二维数组中元素排列的顺序是<code>按行存放</code>的。即：先顺序存放第一行的元素，再存放第二行的元素。（最右边的下标变化最快，第一维的下标变化最慢）。</p><p><img src="/../../images/04/image-20230808154933145.png" alt="image-20230808154933145"></p><p>举例，整型数组<code>b[3][3]</code>在内存中的存放：</p><p><img src="/../../images/04/image-20230818151137312.png"></p><p>举例：关于长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//36</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-4-成员的调用"><a href="#5-4-成员的调用" class="headerlink" title="5.4 成员的调用"></a>5.4 成员的调用</h3><p>格式：<strong>数组名[下标] [下标]</strong></p><p>跟一维数组一样，多维数组每个维度的第一个成员也是从 0 开始编号。</p><p>举例1：给指定索引位置的元素赋值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//给指定索引位置的元素赋值</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：查看数组元素的地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr2[%d][%d] = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><p><img src="/../../images/04/image-20230829233626295.png"></p><h3 id="5-5-二维数组其它定义方式"><a href="#5-5-二维数组其它定义方式" class="headerlink" title="5.5 二维数组其它定义方式"></a>5.5 二维数组其它定义方式</h3><p><strong>定义方式2：声明与初始化同时进行</strong></p><p>多维数组也可以使用大括号，在声明的同时，一次性对所有成员赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上例中， a 是一个二维数组，这种赋值写法相当于将第一维的每个成员写成一个数组。</p><p><img src="/../../images/04/1689217852598.png" alt="1689217852598"></p><blockquote><p>说明：这里的地址以十进制数值进行的说明。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//0000006ac71ffd30</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0000006ac71ffd34</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0000006ac71ffd38</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0000006ac71ffd3c</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0000006ac71ffd40</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//0000006ac71ffd40</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//0000006ac71ffd40</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0000006ac71ffd44</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义方式3：部分元素赋值</strong></p><p>多维数组也可以仅为指定的位置进行初始化赋值，未赋值的成员会自动设置为“零”值 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//指定了 [0][0] 和 [1][1] 位置的值，其他位置就自动设为 0 。</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>定义方式4：使用单层大括号赋值</strong></p><p>多维数组也可以使用单层大括号赋值。不管数组有多少维度，在内存里面都是线性存储。对于<code>a[2][2]</code>来说， <code>a[0][0]</code> 的后面是 <code>a[0][1]</code> ，再后面是<code>a[1][0]</code> ，以此类推。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//会自动匹配到各行各列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>定义方式5：方式4的简化</strong></p><p>在方式4的基础上，如果对全部元素赋值，那么第一维的长度可以不给出。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//int a[2][3] = {1, 2, 3, 4, 5, 6}; </span><span class="token comment">//可以写为：</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//也可以写为：</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//行数自然判定为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习：下面哪些赋值操作是正确的？（都对）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//对应定义方式2</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//对应定义方式4</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//对应定义方式5</span><span class="token keyword">int</span> arr4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//对应定义方式5</span><span class="token keyword">int</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//对应定义方式5。未显式赋值的位置默认赋值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>错误方式：</strong>在定义二维数组时，必须指定列数（即一行中包含几个元素）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//错误，必须指定列数</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//错误，必须指定列数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> 【武汉科技大学2019研】以下能对数组value进行正确初始化的语句是（　　）。</p></blockquote><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">A．int value[2][]＝{{1，1}，{2，2}}；B．int value6[][3]＝{{1，，3}，{4，5，6}}；C．int value[2]-[3]＝{1，2，3，4，5，6}；D．int value[]-[3]＝{{1}，{4，6，}}；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 【答案】C</p><p> 【解析】二维数组的定义必须指定列数，可以不用指定行数，A错误；数组value为int型数组，不能给数组里面的元素赋空值，BD错误，答案选C。</p></blockquote><h3 id="5-6-举例"><a href="#5-6-举例" class="headerlink" title="5.6 举例"></a>5.6 举例</h3><p>举例1：获取arr数组中所有元素的和</p><p>提示：使用for的嵌套循环即可。</p><p><img src="/../../images/04/image-20220317005436209.png" alt="image-20220317005436209"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROWS</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLS</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录总和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"总和为%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：求二维数组最大值以及对应的行列角标</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROWS</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLS</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                         <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                         <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxValue <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxValue <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                maxRow <span class="token operator">=</span> i<span class="token punctuation">;</span>                maxCol <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值: %d\n"</span><span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对应的行索引: %d\n"</span><span class="token punctuation">,</span> maxRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对应的列索引: %d\n"</span><span class="token punctuation">,</span> maxCol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例3：将一个二维数组行和列的元素互换，存到另一个二维数组中。</p><p><img src="/../../images/04/image-20230527130139301.png" alt="image-20230527130139301"></p><blockquote><p><code>a[i][j] ---&gt; b[j][i]</code></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROWS</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLS</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                         <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组 a:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//处理a数组中的一行中各元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//处理a数组中某一列中各元素</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出a数组的一个元素</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//处理a数组中的一行中各元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//处理a数组中某一列中各元素</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将a数组元素的值赋给b数组相应元素</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组 b:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出b数组各元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//处理b数组中一行中各元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//处理b数组中一列中各元素</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出b数组的一个元素</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p> <img src="../../images/04/image-20230829235059731.png" alt="image-20230829235059731" style="zoom: 80%;"><p>举例4：二维char型数组</p><p>将”Apple”、”Orange”、”Grape”、”Pear”、”Peach”存储在数组中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> fruit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Apple"</span><span class="token punctuation">,</span><span class="token string">"Orange"</span><span class="token punctuation">,</span><span class="token string">"Grape"</span><span class="token punctuation">,</span><span class="token string">"Pear"</span><span class="token punctuation">,</span><span class="token string">"Peach"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应图示：</p><p><img src="/../../images/04/image-20230818154347419.png" alt="image-20230818154347419"></p><p>举例5：使用二维数组打印一个 10 行杨辉三角。</p><p>提示：</p><ol><li><p>第一行有 1 个元素, 第 n 行有 n 个元素</p></li><li><p>每一行的第一个元素和最后一个元素都是 1</p></li><li><p>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：</p><pre class="line-numbers language-none"><code class="language-none">yanghui[i][j] = yanghui[i-1][j-1] + yanghui[i-1][j];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/../../images/04/image-20220317005549522.png" alt="image-20220317005549522"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROWS</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> yangHui<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//初始化第一列和对角线上的元素为1</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//给其他位置元素赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> yangHui<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> yangHui<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 打印杨辉三角</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 打印每行的元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d "</span><span class="token punctuation">,</span> yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【华南理工大学2018研】以下数组定义中不正确的是（　　）。</p></blockquote><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">A．int a[2][3]；B．int b[][3]＝{0}；C．int c[100][100]＝{0}；D．int d[3][]＝{{1}， {1， 2， 3}，{1}}；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【答案】D</p><p>【解析】定义二维数组时一定要指定数组的列数，可以不指定数组的行数，D错误。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第03章：运算符与流程控制</title>
      <link href="/2024/04/24/04-c-yu-yan/di-03-zhang-yun-suan-fu-yu-liu-cheng-kong-zhi/"/>
      <url>/2024/04/24/04-c-yu-yan/di-03-zhang-yun-suan-fu-yu-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="第03章-运算符与流程控制"><a href="#第03章-运算符与流程控制" class="headerlink" title="第03章_运算符与流程控制"></a>第03章_运算符与流程控制</h1><hr><h2 id="本章专题脉络"><a href="#本章专题脉络" class="headerlink" title="本章专题脉络"></a>本章专题脉络</h2><p><img src="/../../images/04/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.png"></p><h2 id="1-运算符（Operator）"><a href="#1-运算符（Operator）" class="headerlink" title="1. 运算符（Operator）"></a>1. 运算符（Operator）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、sizeof运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符</td><td align="center">+、-、+、-、*、/、%、++、–</td></tr><tr><td align="center">赋值运算符</td><td align="center">=、+=、-=、*=、/=、%=等</td></tr><tr><td align="center">比较(或关系)运算符</td><td align="center">&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td align="center">逻辑运算符</td><td align="center">&amp;&amp;、||、!</td></tr><tr><td align="center">位运算符</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;</td></tr><tr><td align="center">条件运算符</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">sizeof运算符</td><td align="center">sizeof()</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="1-1-算术运算符"><a href="#1-1-算术运算符" class="headerlink" title="1.1 算术运算符"></a>1.1 算术运算符</h3><p>算术运算符专门用于算术运算，主要有下面几种。</p><p><img src="/../../images/04/image-20230629164033704.png" alt="image-20230629164033704"></p><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">+</span>y<span class="token punctuation">;</span> <span class="token comment">//+可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1.000000</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">6.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 或者写成 6 / 4.0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1.500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例3：%，运算结果的符号与被模数相同</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// -2</span><span class="token keyword">int</span> x3 <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">int</span> x4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// -2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例4：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//++a;</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//无论是变量前++还是变量后++，结果都是11</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 其他变量放在一起使用</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//int y = ++x; // y的值是4，x的值是4，</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// y的值是3，x的值是4</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"==========\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 和输出语句一起</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">//printf("%d\n",++z);// 输出结果是6，z的值也是6</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>z<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果是5，z的值是6</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与此对应的：</p><ul><li>变量<code>前--</code> ：变量先自减1，然后再运算。</li><li>变量<code>后--</code> ：变量先运算，然后再自减1。</li></ul><p><strong>案例1：</strong></p><pre class="line-numbers language-none"><code class="language-none">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。格式如下：数字xxx的情况如下：个位数：十位数：百位数：例如：数字153的情况如下：个位数：3十位数：5百位数：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">153</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bai <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> shi <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//int shi = num / 10 % 10;</span>    <span class="token keyword">int</span> ge <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"百位为：%d\n"</span><span class="token punctuation">,</span> bai<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十位为：%d\n"</span><span class="token punctuation">,</span> shi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"个位为：%d\n"</span><span class="token punctuation">,</span> ge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hours <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> day <span class="token operator">=</span> hours <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hour <span class="token operator">=</span> hours <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"为抵抗洪水，战士连续作战%d小时：是%d天%d小时\n"</span><span class="token punctuation">,</span>hours<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-赋值运算符"><a href="#1-2-赋值运算符" class="headerlink" title="1.2 赋值运算符"></a>1.2 赋值运算符</h3><ul><li>符号 = <ul><li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li>扩展赋值运算符： +=、 -=、*=、 /=、%=</li></ul><table><thead><tr><th>运算符</th><th>名称</th><th>实例</th><th>展开形式</th></tr></thead><tbody><tr><td>+=</td><td>复合加赋值</td><td>a+=b</td><td>a=a+b</td></tr><tr><td>-=</td><td>复合减赋值</td><td>a-=b</td><td>a=a-b</td></tr><tr><td>*=</td><td>复合乘赋值</td><td>a*=b</td><td>a=a*b</td></tr><tr><td>/=</td><td>复合除赋值</td><td>a/=b</td><td>a=a/b</td></tr><tr><td>%=</td><td>复合模赋值</td><td>a%=b</td><td>a=a%b</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i + 3</span>i <span class="token operator">-=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i - 8</span>i <span class="token operator">*=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i * 9</span>i <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i / 2</span>i <span class="token operator">%=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i % 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//连续赋值的测试</span><span class="token comment">//以前的写法</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//连续赋值的写法</span><span class="token keyword">int</span> a2<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>a2 <span class="token operator">=</span> b2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">1.7</span><span class="token punctuation">;</span>  <span class="token comment">// a=a+1.7 =&gt; 11.7 =&gt; 11</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a=11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//表达式的值为5,将5赋值给b，接着将b的值赋值给a</span>a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//表达式值为11，a值为11，c值为6</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//表达式值为10，a值为10，b等于4，c等于6</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//表达式值为5，a等于5，b等于10，c等于2</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//表达式值为12，a,b值均为12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】</p><p>若a、b和t都为int变量，则下面不能交换变量a和b值的是（　　）。<br>A．t＝a； a＝b； b＝t；<br>B．a＝t； t＝b； b＝a；<br>C．t＝b； b＝a； a＝t；<br>D．a＝a＋b； b＝a－b； a＝a－b；</p><p>【答案】B</p><p>【解析】B中首先把t的值赋值给了a，则a的值已经被取代了，后面执行b＝a，则ab的值都等于t的值。</p></blockquote><blockquote><p> 【中央财经大学2018研】以下程序运行后的输出结果是（　　）。</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> d<span class="token punctuation">;</span>  <span class="token keyword">float</span> f<span class="token punctuation">;</span>  <span class="token keyword">long</span> l<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  i <span class="token operator">=</span> f <span class="token operator">=</span> l <span class="token operator">=</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %ld %.1f %.1f\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>f<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> A．6 6 6.0 6.0<br> B．6 6 6.7 6.7<br> C．6 6 6.0 6.7<br> D．6 6 6.7 6.0</p><p> 【答案】A</p><p> 【解析】赋值运算符是自右向左结合的，所以首先执行d＝20/3＝6，同时i、l、f也全为6，在进行输出时，f和d要保留一位小数，所以答案选A。</p></blockquote><blockquote><p>练习：</p><p>以下选项中正确的定义语句是（　　）。<br>A．double a；b；<br>B．double a＝b＝7；<br>C．double a＝7，b＝7；<br>D．double，a，b；</p><p>【答案】C</p><p>【解析】同一类型变量的定义时，不同变量之间需要用“，”分隔，选项A错误；定义变量时初始化赋值不能用等号连接，选项B错误；变量类型说明后面不能用逗号，而是用空格分离，选项D错误。答案选择C选项。</p></blockquote><h3 id="1-3-比较运算符-或关系运算符"><a href="#1-3-比较运算符-或关系运算符" class="headerlink" title="1.3 比较运算符(或关系运算符)"></a>1.3 比较运算符(或关系运算符)</h3><p>常用的比较运算符：</p><table><thead><tr><th>关系运算符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>num &gt; 10</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>num &gt;= 10</td></tr><tr><td>&lt;</td><td>小于</td><td>num &lt; 10</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>num &lt;= 10</td></tr><tr><td><code>==</code></td><td>等于</td><td>num == 10</td></tr><tr><td>!=</td><td>不等于</td><td>num != 10</td></tr></tbody></table><ul><li>比较运算的结果只有两个取值，要么是真(非0 表示，默认使用1)，要么是假(0 表示)。<ul><li>比如， 20 &gt; 12 返回 1 ， 12 &gt; 20 返回 0 。</li></ul></li><li>比较运算符“<code>==</code>”不能误写成“<code>=</code>”</li></ul><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i1 <span class="token operator">!=</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i1 <span class="token operator">&gt;=</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m <span class="token operator">=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：多个关系运算符不宜连用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">i <span class="token operator">&lt;</span> j <span class="token operator">&lt;</span> k   <span class="token comment">//期望判断j是否大于i，且小于k</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是合法表达式，不会报错，但是通常达不到想要的结果，即不是保证变量 j 的值在 i 和 k 之间。比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//i &lt; j &lt; k</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&lt;</span> j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j大于15,且小于20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出此语句</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j不在15到20之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为关系运算符是从左到右计算，所以实际执行的是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token comment">//i &lt; j 返回 0 或 1 ，所以最终是 0 或 1 与变量 k 进行比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>期望的效果应该写为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//i &lt; j &lt; k</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j大于15,且小于20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j不在15到20之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出此语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 【北京航空航天大学2018研】若变量a，b，c的取值分别是1，2，3，则表达式“!((b＋c)＞(a＋4))”的值是（　）。<br> A．0<br> B．1<br> C．2<br> D．3</p><p> 【答案】B</p><p> 【解析】首先b＋c等于5，a＋4也等于5，因此 (b＋c)＞(a＋4)为“假”，即0，对0取非结果为1，因此答案为B。</p></blockquote><h3 id="1-4-逻辑运算符"><a href="#1-4-逻辑运算符" class="headerlink" title="1.4 逻辑运算符"></a>1.4 逻辑运算符</h3><p>主要有下面三个运算符：</p><table><thead><tr><th>逻辑运算符</th><th>描述</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与运算符</td><td>两个条件都要满足</td><td>num1 &gt;= 10 &amp;&amp; num2 &gt;= 20</td></tr><tr><td>||</td><td>或运算符</td><td>两个条件只需满足其一</td><td>num1 &gt;= 10 || num2 &gt;= 20</td></tr><tr><td>!</td><td>非运算符</td><td>否定条件</td><td>!(num1 &gt;= 10)（等价于 num1 &lt; 10）</td></tr></tbody></table><p>逻辑运算符提供逻辑判断功能，用于构建更复杂的表达式。</p><p>举例：</p><table><thead><tr><th>a</th><th>b</th><th>a &amp;&amp; b</th><th>a || b</th><th>!a</th></tr></thead><tbody><tr><td>1（真）</td><td>1（真）</td><td>1（真）</td><td>1（真）</td><td>0（假）</td></tr><tr><td>1（真）</td><td>0（假）</td><td>0（假）</td><td>1（真）</td><td>0（假）</td></tr><tr><td>0（假）</td><td>1（真）</td><td>0（假）</td><td>1（真）</td><td>1（真）</td></tr><tr><td>0（假）</td><td>0（假）</td><td>0（假）</td><td>0（假）</td><td>1（真）</td></tr></tbody></table><blockquote><p>对于逻辑运算符来说，任何非零值都表示真，零值表示伪。比如， 5 || 0 会返回 1 ， 5 &amp;&amp; 0 会返回0 。</p></blockquote><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天天气真晴朗\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：<strong>短路现象</strong></p><ul><li>&amp;&amp;：a &amp;&amp; b<ul><li>当 a 为假(或0)时，因为a &amp;&amp; b 结果必定为 0，所以不再执行表达式 b</li><li>当 a 为真(非0)时，因为a &amp;&amp; b 结果不确定，所以会继续求解表达式b</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> j<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"床前明月光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我叫郭德纲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>|| ：a || b<ul><li>当 a 为真(非0)时，因为a || b 结果必定为 1，所以不再执行表达式 b</li><li>当 a 为假(或0)时，因为a || b 结果不确定，所以会继续求解表达式b</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">||</span> j<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"床前明月光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我叫郭德纲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习：请写出如下程序运行后的结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> z <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        z<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// z = 44</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>z <span class="token operator">==</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        z<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// z = 46</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z=%d"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>答案：z=46</p></blockquote><blockquote><p> 【华南理工大学2018研】设int a＝3；，下列哪一个表达式的值等于0（　　）。<br> A．a&amp;&amp;(a＞0)<br> B．!a||a<br> C．a%＝a<br> D．a＞＝a</p><p> 【答案】C</p><p> 【解析】A中a!＝0且a＞0所以表达式的值为1；B中||表示或，所以值也为1；D中表达式值也为1；答案选C。</p></blockquote><blockquote><p> 【四川大学2017研】语句：printf(“%d”,(a＝2) &amp;&amp; (b＝－2))；的输出结果是（　　）。<br> A．无输出<br> B．结果不确定<br> C．－1<br> D．1</p><p> 【答案】D</p><p> 【解析】a＝2为真，b＝－2也为真，所以输出1，答案选D。</p></blockquote><h3 id="1-5-位运算符"><a href="#1-5-位运算符" class="headerlink" title="1.5 位运算符"></a>1.5 位运算符</h3><ul><li><p>C 语言提供一些位运算符，用来操作二进制位（bit）。</p></li><li><p>位运算符的运算过程都是基于二进制的补码运算。</p></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>二进制左移</td><td>将一个数的各二进制位全部左移指定的位数，左边的二进制位丢弃，右边补0。</td></tr><tr><td>&gt;&gt;</td><td>二进制右移</td><td>将一个数的各二进制位全部右移指定的位数，正数左补0，负数左补1，右边丢弃。</td></tr><tr><td>&amp;</td><td>按位与</td><td>两个二进制位都为 1，结果为1，否则为0。</td></tr><tr><td>|</td><td>按位或</td><td>两个二进制位只要有一个为1（包含两个都为 1 的情况），结果为1，否则为0。</td></tr><tr><td>^</td><td>按位异或</td><td>两个二进制位一个为0，一个为1，结果为1，否则为0。</td></tr><tr><td>~</td><td>按位取反</td><td>将每一个二进制位变成相反值，即 0 变成 1 ， 1 变成 0 。</td></tr></tbody></table><ul><li>结合赋值运算符的经验，这里有：&lt;&lt;= 、 &gt;&gt;= 、 &amp;= 、 ^= 等</li></ul><p><strong>举例1：</strong></p><p><code>（1）左移：&lt;&lt;</code></p><blockquote><p>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</p></blockquote><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span>  类似于  <span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225113651675.png" alt="image-20200225113651675"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span>  类似于  <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225114707524.png" alt="image-20200225114707524"></p><p><code>（2）右移：&gt;&gt;</code></p><blockquote><p>运算规则：在一定范围内，数据每向右移动一位，相当于原数据/2。（正数、负数都适用）</p></blockquote><p>【注意】</p><p>1、如果不能整除，<code>向下取整</code>。</p><p>2、右移运算符最好只用于无符号整数，不要用于负数。因为不同系统对于右移后如何处理负数的符号位，有不同的做法，可能会得到不一样的结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">69</span><span class="token operator">&gt;&gt;</span><span class="token number">4</span>  类似于  <span class="token number">69</span><span class="token operator">/</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span> <span class="token number">69</span><span class="token operator">/</span><span class="token number">16</span> <span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225115636844.png" alt="image-20200225115636844"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span><span class="token number">69</span><span class="token operator">&gt;&gt;</span><span class="token number">4</span>  类似于  <span class="token operator">-</span><span class="token number">69</span><span class="token operator">/</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">69</span><span class="token operator">/</span><span class="token number">16</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225120112188.png" alt="image-20200225120112188"></p><p>练习：高效的方式计算2 * 8的值（经典面试题）</p><pre class="line-numbers language-none"><code class="language-none">答案：2 &lt;&lt; 3 、  8  &lt;&lt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例2：</strong></p><p><code>（1）按位与：&amp;</code></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225122440953.png" alt="image-20200225122440953"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225122221616.png" alt="image-20200225122221616"></p><p><code>（2）按位或：|</code></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">9</span> <span class="token operator">|</span> <span class="token number">7</span>  <span class="token comment">//结果： 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225122758851.png" alt="image-20200225122758851"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token comment">//结果： -9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225123409130.png" alt="image-20200225123409130"></p><p><code>（3）按位异或：^</code></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li><li><p>0 ^ 0 结果为0</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">9</span> <span class="token operator">^</span> <span class="token number">7</span>  <span class="token comment">//结果为14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225123445305.png" alt="image-20200225123445305"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">^</span> <span class="token number">7</span> <span class="token comment">//结果为-16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225133145727.png" alt="image-20200225133145727"></p><p><code>（4）按位取反：~</code></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">~</span><span class="token number">9</span>  <span class="token comment">//结果：-10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225124112662.png" alt="image-20200225124112662"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">~</span><span class="token operator">-</span><span class="token number">9</span>  <span class="token comment">//结果：8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20200225124156862.png" alt="image-20200225124156862"></p><p>练习1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i <span class="token operator">&amp;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i <span class="token operator">|</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//13</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i <span class="token operator">^</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../images/04/snipaste_20220312_002549.jpg"></p><p><strong>练习2：特定位清零</strong></p><p>技巧：待清零的位与0，其它位与1</p><p>示例：设字符型 x 的当前值为 53，将其最低两位清 0，其余位保持不变</p><p>分析：与二进制的0b11111100数值求&amp;运算即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 0b00110101</span>    x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">252</span><span class="token punctuation">;</span> <span class="token comment">// 0b11111100</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0b00110100</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：判断特定位是否为零</p><p>技巧：待判定位与 1，其它位与 0；判与运算结果是否为 0</p><p>示例：设字符型 x 的当前值为 53，判定其最高位是否为 0</p><p>分析：与二进制的0b10000000求&amp;运算，若结果为 0，则最高位为 0，否则为 1</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 0b00110101</span>    x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment">// 0b10000000</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最高位为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最高位不为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：保留特定位</p><p>技巧：待保留位全部与 1，其余位与 0</p><p>示例：设字符型 x 的当前值为 53，保留其最低 4 位，其余位清零</p><p>分析：与二进制的0b00001111求&amp;运算即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 0b00110101</span>    x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span>  <span class="token comment">// 0b00001111</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0b00000101</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：待置 1 或 1，保持位或 0</p><p>示例：设字符型 x 的当前值为 53，将其最低两位置 1，其余位保持不变</p><p>分析：与二进制0b00000011求或运算即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 0b00110101</span>    x <span class="token operator">=</span> x <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 0b00000011</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0b00110111</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：特定位取反</p><p>待取反位异或 1，保持位异或 0</p><p>示例：设字符型 x 的当前值为 53，将其最低两位取反，其余位保持不变</p><p>分析：与二进制0b00000011求异或运算即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 0b00110101</span>    x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 0b00000011</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0b00110110</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-条件运算符"><a href="#1-6-条件运算符" class="headerlink" title="1.6 条件运算符"></a>1.6 条件运算符</h3><ul><li>条件运算符格式：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token operator">?</span> 表达式<span class="token number">1</span><span class="token operator">:</span>表达式<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>说明：条件表达式是如果为 true (非0值)，就执行表达式1，否则执行表达式2。</p><p><img src="/../../images/04/image-20220312002841945.png"></p></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><p><strong>举例1：</strong>获取两个数中的较大值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取两个数的较大值</span>    <span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token punctuation">(</span>m1 <span class="token operator">&gt;</span> m2<span class="token punctuation">)</span><span class="token operator">?</span> m1 <span class="token operator">:</span> m2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m1和m2中的较大值为%d\n"</span><span class="token punctuation">,</span>max1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong>获取三个数中的最大值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token comment">//写法1：</span>    <span class="token keyword">int</span> tempMax <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">;</span>    <span class="token keyword">int</span> finalMax <span class="token operator">=</span> <span class="token punctuation">(</span>tempMax <span class="token operator">&gt;</span> n3<span class="token punctuation">)</span><span class="token operator">?</span> tempMax <span class="token operator">:</span> n3<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"三个数中最大值为%d\n"</span><span class="token punctuation">,</span>finalMax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写法2：不推荐，可读性差</span>    <span class="token keyword">int</span> finalMax1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> n3<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">)</span> <span class="token operator">:</span> n3<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"三个数中最大值为%d\n"</span><span class="token punctuation">,</span>finalMax1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 【华南理工大学2018研】输入一个字符，判别它是否为大写字母，如果是，将它变为小写字母；如果不是，不转换。然后输出最后得到的字符。请在下面空白处填上适当语句。</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> ch<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ① <span class="token punctuation">)</span><span class="token punctuation">;</span>  ch<span class="token operator">=</span><span class="token punctuation">(</span>ch<span class="token operator">&gt;=</span><span class="token char">'A'</span><span class="token operator">&amp;&amp;</span> ② <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">:</span> ③ <span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span> ④ <span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ⑤ <span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 【答案】①&amp;ch②ch＜＝’Z’③ch④”%c”⑤0</p><p> 【解析】程序进行输入时要加上地址符&amp;；main函数中的第三行为一个三目运算符，当ch在A～Z之间时ch为真，此时ch＋32变为小写字母，否则不变；程序进行输出时应用%加上数据类型进行输出，最后用return 0来结束程序。</p></blockquote><h3 id="1-7-sizeof-运算符"><a href="#1-7-sizeof-运算符" class="headerlink" title="1.7 sizeof 运算符"></a>1.7 sizeof 运算符</h3><p>sizeof 运算符：sizeof(参数)</p><ul><li>参数可以是<code>数据类型</code>的关键字，也可以是<code>变量名</code>或某个<code>具体的值</code>。</li><li>返回某种数据类型或某个值占用的字节数量。</li></ul><p>举例1：参数为数据类型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通常是 4 或 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例2：参数为变量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通常是 4 或 8</span><span class="token comment">// 参数为数值</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//浮点数的字面量一律存储为double类型,故返回 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sizeof返回值的类型说明</strong></p><p>sizeof 运算符的返回值，C 语言只规定是无符号整数，并没有规定具体的类型，留给系统自己去决定sizeof 到底返回什么类型。不同的系统中，返回值的类型有可能是 unsigned int ，也有可能是unsigned long ，甚至是 unsigned long long ，对应的 printf() 占位符分别是 %u 、 %lu和 %llu 。这样不利于程序的可移植性。</p><p>C 语言提供了一个解决方法，创造了一个类型别名 <code>size_t</code> ，用来统一表示 sizeof 的返回值类型。该别名定义在 <code>stddef.h</code> 头文件里面，对应当前系统的 sizeof 的返回值类型，可能是 unsigned int ，也可能是 unsigned long 。</p><p>printf() 有专门的占位符 <code>%zd</code> 或 <code>%zu</code> ，用来处理 size_t 类型的值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%zd\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码中，不管 sizeof 返回值的类型是什么， %zd 占位符（或 %zu ）都可以正确输出。</p><p>如果当前系统不支持 %zd 或 %zu ，可使用 %u （unsigned int）或 %lu （unsigned long int）代替。</p><h3 id="1-8-运算符的优先级"><a href="#1-8-运算符的优先级" class="headerlink" title="1.8 运算符的优先级"></a>1.8 运算符的优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><p><img src="/../../images/04/image-20230812171714087.png" alt="image-20230812171714087"></p><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="2-流程控制结构"><a href="#2-流程控制结构" class="headerlink" title="2. 流程控制结构"></a>2. 流程控制结构</h2><ul><li>流程控制结构是用来控制程序中各<code>语句执行顺序</code>的语句，可以把语句组合成能<code>完成一定功能</code>的小逻辑模块。</li><li>程序设计中规定的<code>三种</code>流程结构，即：<ul><li><strong>顺序结构</strong><ul><li>程序从上到下逐行地执行，中间没有任何判断和跳转。</li></ul></li><li><strong>分支结构</strong><ul><li>根据条件，选择性地执行某段代码。</li><li>有<code>if…else</code>和<code>switch-case</code>两种分支语句。</li></ul></li><li><strong>循环结构</strong><ul><li>根据循环条件，重复性的执行某段代码。</li><li>有<code>for</code>、<code>while</code>、<code>do-while</code>三种循环语句。</li></ul></li></ul></li><li>生活中、工业生产中流程控制举例</li></ul><p><img src="/../../images/04/%E6%B4%97%E8%A1%A3%E6%B5%81%E7%A8%8B.jpg"></p><h3 id="2-1-顺序结构"><a href="#2-1-顺序结构" class="headerlink" title="2.1 顺序结构"></a>2.1 顺序结构</h3><p>程序<code>从上到下逐行</code>地执行。表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响。</p><p><img src="/../../images/04/image-20211218093256771.png" alt="image-20211218093256771"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y = %d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对x、y的值进行修改</span>    x<span class="token operator">++</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y = %d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c语言中定义变量时采用合法的<code>前向引用</code>。如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//use of undeclared identifier 'num1'</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-分支结构1：if-else"><a href="#2-2-分支结构1：if-else" class="headerlink" title="2.2 分支结构1：if-else"></a>2.2 分支结构1：if-else</h3><h4 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h4><p><strong>结构1：单分支</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>｛  语句块<span class="token punctuation">;</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>执行流程：</code>条件表达式为真（值不为 0 ）时，就执行语句块。</p><p><code>图示：</code></p><p><img src="/../../images/04/image-20220514160139926.png" alt="image-20220514160139926"></p><p><code>举例：</code>成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> heartBeats <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>heartBeats <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">||</span> heartBeats <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你需要做进一步的检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"体检结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构2：双分支</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>   语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  语句块<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是为真（值不为 0 ）还是假（值为0）</li><li>如果是真，就执行语句块1</li><li>如果是假，就执行语句块2</li></ol><p><img src="/../../images/04/image-20220514160243421.png" alt="image-20220514160243421"></p><p><code>举例：</code>定义一个整数，判定是偶数还是奇数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d是偶数\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d是奇数\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构3：多重分支</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  语句块<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式n<span class="token punctuation">)</span> <span class="token punctuation">{</span> 语句块n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  语句块n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>执行流程：</code></p><ol><li>首先判断关系表达式1看其结果是真（值不为0）还是假（值为0）</li><li>如果是真，就执行语句块1，然后结束当前多分支</li><li>如果是假，就继续判断条件表达式2，看其结果是真还是假</li><li>如果是真，就执行语句块2，然后结束当前多分支</li><li>如果是假，就继续判断条件表达式…看其结果是真还是假</li></ol><p>​    …</p><p>   n.  如果没有任何关系表达式为真，就执行语句块n+1，然后结束当前多分支。</p><p><img src="/../../images/04/image-20220514160538651.png" alt="image-20220514160538651"></p><p><code>举例：</code></p><pre class="line-numbers language-none"><code class="language-none">岳小鹏参加C语言考试，他和父亲岳不群达成承诺：如果：成绩为100分时，奖励一辆跑车；成绩为(80，99]时，奖励一辆山地自行车；当成绩为[60,80]时，奖励环球影城一日游；其它时，胖揍一顿。说明：默认成绩是在[0,100]范围内<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span><span class="token comment">//岳小鹏的期末成绩</span>    <span class="token comment">//写法一：默认成绩范围为[0,100]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励一辆跑车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//错误的写法：}else if(80 &lt; score &lt;= 99){</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励一辆山地自行车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励环球影城玩一日游"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//else{</span>    <span class="token comment">//printf("胖揍一顿");</span>    <span class="token comment">//}</span>    <span class="token comment">//写法二：</span>    <span class="token comment">// 默认成绩范围为[0,100]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励一辆跑车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励一辆山地自行车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奖励环球影城玩一日游"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"胖揍一顿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当条件表达式之间是“<code>互斥</code>”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</p><p>当条件表达式之间是“<code>包含</code>”关系时，“<code>小上大下 / 子上父下</code>”，否则范围小的条件表达式将不可能被执行。</p></blockquote><blockquote><p>当if-else结构是“多选一”时，最后的<code>else是可选的</code>，根据需要可以省略</p></blockquote><blockquote><p>语句块只有一条执行语句时，一对<code>{}可以省略</code>，但建议保留</p></blockquote><p>练习：判断输出结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number &gt;= 6,且 &lt;= 12.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"判断不成功.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：</p><p>如果有多个 if 和 else ，没有{}的情况下， else 总是跟最接近的 if 匹配。</p><p>为了提供代码的可读性，建议使用大括号，明确 else 匹配哪一个 if 。</p></blockquote><p>如果希望else与外层的if匹配，改写为如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number &gt;= 6,且 &lt;= 12.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"判断不成功.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-举例"><a href="#2-2-2-举例" class="headerlink" title="2.2.2 举例"></a>2.2.2 举例</h4><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：</p><p>编写一个程序，判定某个年份是否为闰年。年份满足如下条件之一，即是闰年：</p><p>⑴ year 是 400 的整倍数： year%400==0</p><p>(2) 能被4整除，但不能被100整除：year % 4 == 0 &amp;&amp; year % 100 != 0</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入年份: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 是闰年\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 不是闰年\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例3：解方程</p><p>设计求解一元二次方程 $ax^2+bx+c=0$ （a≠0）的程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">float</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入方程中的系数与常量 a,b,c: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f%f%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x1=%f,x2=%f\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方程没有根\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例4：判断水的温度</p><pre class="line-numbers language-none"><code class="language-none">如果大于95℃，则打印“开水”；如果大于70℃且小于等于95℃，则打印“热水”；如果大于40℃且小于等于70℃，则打印“温水”；如果小于等于40℃，则打印“凉水”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> waterTemperature <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>waterTemperature <span class="token operator">&gt;</span> <span class="token number">95</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>waterTemperature <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> waterTemperature <span class="token operator">&lt;=</span> <span class="token number">95</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"热水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>waterTemperature <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> waterTemperature <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"温水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"凉水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例5：<strong>if-else的嵌套</strong></p><p>出票系统：根据淡旺季的月份和年龄，打印票价。要求，月份和年龄从键盘获取输入。</p><p>4_10 旺季：<br>    成人（18-60）：60<br>    儿童（&lt; 18）   :  半价<br>    老人（&gt; 60）   :  1/3<br>淡季：<br>    成人   :  40<br>    其他   :  20</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> month<span class="token punctuation">,</span> age<span class="token punctuation">;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">60.0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入月份（1-12）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 旺季</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            price <span class="token operator">=</span> price <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 半价</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            price <span class="token operator">=</span> price <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 1/3价格</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 淡季</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            price <span class="token operator">=</span> <span class="token number">40.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            price <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您的票价是：￥%.2f\n"</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】对下述程序段的描述正确的是（　　）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span>  a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token keyword">else</span>  a<span class="token operator">++</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A．若输入4，5则输出a＝5，b＝6<br>B．若输入5，4则输出a＝4，b＝5<br>C．若输入5，4则输出a＝5，b＝5<br>D．有语法错误，不能通过编译</p><p>【答案】D</p><p>【解析】if（表达式）后面如果没有用花括号括起来，那么if的子语句只包括第一条语句，即在程序中只有a＝b是属于if语句块的，if和else中间隔了一条语句b＝a，编译无法通过。</p></blockquote><blockquote><p> 【华南理工大学2018研】两次运行下面的程序，如果从键盘上分别输入6和4，则输出的结果是（　　）</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> A．7和5<br> B．6和3<br> C．7和4<br> D．6和4</p><p> 【答案】A</p><p> 【解析】当输入6时，判断 x++＞5为真，进入if语句块，此时x＝7，输出7；当输入4时，进入else语句块，此时x＝5，然后因为–是先运算后自减，所以先输出5，后x的值为4，答案选A。</p></blockquote><h3 id="2-3-分支结构2：switch-case"><a href="#2-3-分支结构2：switch-case" class="headerlink" title="2.3 分支结构2：switch-case"></a>2.3 分支结构2：switch-case</h3><h4 id="2-3-1-基本语法"><a href="#2-3-1-基本语法" class="headerlink" title="2.3.1 基本语法"></a>2.3.1 基本语法</h4><p>switch 语句用于判断条件有多个常量结果的情况。它把多重的 else if 改成更易用、可读性更好的形式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> 常量值<span class="token number">1</span><span class="token operator">:</span>         语句块<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//break;</span><span class="token keyword">case</span> 常量值<span class="token number">2</span><span class="token operator">:</span>         语句块<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//break;</span>┇ ┇<span class="token keyword">case</span> 常量值n<span class="token operator">:</span>         语句块n<span class="token punctuation">;</span>         <span class="token comment">//break;</span><span class="token punctuation">[</span><span class="token keyword">default</span><span class="token operator">:</span>         语句块n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程图：</strong></p><p><img src="/../../images/04/image-20220514101841710.png" alt="image-20220514101841710"></p><p><strong>执行过程：</strong></p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后，<br>​              情况1：如果遇到break，则执行break并跳出当前的switch-case结构<br>​        情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;<code>case穿透</code><br>​         …<br>​        直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p><p><strong>使用注意点：</strong></p><ul><li><p>case子句中的值必须是常量，不能是变量名或不确定的表达式值或范围。</p></li><li><p>同一个switch语句，所有case子句中的常量值互不相同。</p></li><li><p>如果没有break，程序会顺序执行到switch结尾；从使用频率说，一般switch-case结构中，都需要编写break。</p></li><li><p>default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</p></li></ul><h4 id="2-3-2-举例"><a href="#2-3-2-举例" class="headerlink" title="2.3.2 举例"></a>2.3.2 举例</h4><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zero\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"one\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"two\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"three\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"other\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与如下代码对比：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zero\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//break;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"one\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//break;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"two\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//break;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"three\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//break;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"other\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>    <span class="token comment">//方式1：</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成绩输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果多个 case 分支对应同样的语句体，可以改写如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>    <span class="token comment">//方式2：体会case穿透</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成绩输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从算法层面，还可以优化下代码，改为如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>    <span class="token comment">//方式3：算法层面优化</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成绩输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> key <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">:</span>  <span class="token comment">//提示：Expression is not an integer constant expression</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"正数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】若有定义：int a＝1，b＝2； float x＝3，w； 则合法的switch语句是（　）。</p><p>A.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>w <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>w <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B．</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>z <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>z <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C．</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>w <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>w <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>D．</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>w <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【答案】A</p><p>【解析】B中，变量z未定义；C中x为浮点型，switch后面的表达式不能是浮点型，只能是整型和字符型；D中swith表达式后面不能加分号，答案选A。</p></blockquote><blockquote><p>【北京航空航天大学2018研】对于下列代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token char">'H'</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'W'</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若option的取值为’W’，则该代码段的输出结果是（　　）。<br>A．Welcome<br>B．Welcome Bye<br>C．Hello Welcome Bye<br>D．以上结果都不对</p><p>【答案】B</p><p>【解析】由于option为’W’，所以首先应该输出Welcome，但是由于该语句后面没有break语句来终止选择语句switch，因此会继续执行下面的语句，直到遇上break，所以最后输出Welcome Bye，答案为B。</p></blockquote><h4 id="2-3-3-if-else与switch-case比较"><a href="#2-3-3-if-else与switch-case比较" class="headerlink" title="2.3.3 if-else与switch-case比较"></a>2.3.3 if-else与switch-case比较</h4><ul><li><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li><p>细节对比：</p><ul><li>if-else语句优势<ul><li>if语句的条件可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值，只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势<ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li></ul><h3 id="2-4-循环结构之1：for循环"><a href="#2-4-循环结构之1：for循环" class="headerlink" title="2.4 循环结构之1：for循环"></a>2.4 循环结构之1：for循环</h3><ul><li><p>循环结构的理解：循环语句具有在<code>某些条件</code>满足的情况下，<code>反复执行</code>特定代码的功能。</p></li><li><p>循环结构分类：</p><ul><li>for 循环</li><li>while 循环</li><li>do-while 循环</li></ul></li><li><p>循环结构<code>四要素</code>：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h4 id="2-4-1-基本语法"><a href="#2-4-1-基本语法" class="headerlink" title="2.4.1 基本语法"></a>2.4.1 基本语法</h4><p><strong>语法格式：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>①初始化部分<span class="token punctuation">;</span> ②循环条件部分<span class="token punctuation">;</span> ④迭代部分<span class="token punctuation">)</span>｛         ③循环体部分<span class="token punctuation">;</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…..-②</p><p><strong>图示：</strong></p><p><img src="/../../images/04/image-20220315013023236.png"></p><p><strong>说明：</strong></p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分，用于初始化循环变量，只执行一次。可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>②循环条件部分，只要为 true ，就会不断执行循环体；当值为false时，退出循环</li><li>④迭代部分，每轮循环结束后执行，使得循环变量发生变化。可以有多个变量更新，用逗号分隔</li></ul><h4 id="2-4-2-举例"><a href="#2-4-2-举例" class="headerlink" title="2.4.2 举例"></a>2.4.2 举例</h4><p><strong>案例1：使用for循环重复执行某些语句</strong></p><p>题目：输出5行HelloWorld</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//写法1：</span><span class="token comment">//    printf("Hello World!\n");</span><span class="token comment">//    printf("Hello World!\n");</span><span class="token comment">//    printf("Hello World!\n");</span><span class="token comment">//    printf("Hello World!\n");</span><span class="token comment">//    printf("Hello World!\n");</span>    <span class="token comment">//写法2：</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：格式的多样性</strong></p><p>题目：写出输出的结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例3：累加的思想</strong></p><p>题目：遍历1-100以内的偶数，并获取偶数的个数，获取所有的偶数的和</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录偶数的个数</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录偶数的和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//printf("偶数的个数为：" + count);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的个数为：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的总和为：%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例4：结合分支结构使用</strong></p><p>题目：输出所有的水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： <code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//定义统计变量，初始化值是0</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//获取三位数，用for循环实现</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取三位数的个位，十位，百位</span>        <span class="token keyword">int</span> ge <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> shi <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bai <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">//判断这个三位数是否是水仙花数，如果是，统计变量++</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ge <span class="token operator">*</span> ge <span class="token operator">*</span> ge <span class="token operator">+</span> shi <span class="token operator">*</span> shi <span class="token operator">*</span> shi <span class="token operator">+</span> bai <span class="token operator">*</span> bai <span class="token operator">*</span> bai<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"水仙花数：%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//输出统计结果就可以了</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"水仙花数共有%d个"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：</p><pre class="line-numbers language-none"><code class="language-none">打印出四位数字中“个位+百位”等于“十位+千位”并且个位数为偶数，千位数为奇数的数字，并打印符合条件的数字的个数。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>案例5：结合break的使用</strong></p><p>说明：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//需求1：最大公约数</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment">//取出两个数中的较小值</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//for(int i = 1;i &lt;= min;i++){</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大公约数是：%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//公约数</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出当前循环结构</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//需求2：最小公倍数</span>    <span class="token comment">//取出两个数中的较大值</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最小公倍数是：%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//公倍数</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：</p><p>1、我们可以在循环中使用break。一旦执行break，就跳出当前循环结构。</p><p>2、小结：如何结束一个循环结构？</p><p>​      结束情况1：循环结构中的循环条件部分返回false</p><p>​      结束情况2：循环结构中执行了break。</p><p>3、如果一个循环结构不能结束，那就是一个死循环！我们开发中要避免出现死循环。</p></blockquote><blockquote><p>【华南理工大学2018研】有一个分数序列$2/1,3/2,5/3,8/5,13/8,21/13,…$,求这个数列的前20项之和。请在下面空白处填上适当语句。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> ① <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     s<span class="token operator">=</span> ② <span class="token punctuation">;</span>         ③ <span class="token punctuation">;</span>    a<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>         ④ <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%16.10f\n"</span><span class="token punctuation">,</span> ⑤ <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【答案】①i＜＝n②s＋a/b③t＝a④b＝t⑤s</p><p>【解析】此程序循环是从＝1开始，所以要计算数列前20项，则循环条件应为i＜＝n；s用来累加求和，所以每次进行累加操作，即s＝s＋a/b；通过分析数列可知，数列中分子是上一项的分子分母之和，而分母是上一项的分子，依照此关系可以通过中间变量t进行换算，最后输出所求结果s。</p></blockquote><blockquote><p>【华南理工大学2018研】从键盘输入10个整数，编程求其中大于3且小于100的数的平均值并输出结果。</p><p>【答案】<br>此题可以先利用循环从屏幕读取10个数，然后依次判断数值是否大于3且小于100的数，最后取平均值进行输出，程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">//输入的整数</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span> <span class="token comment">//记录总和</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//记录个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//    printf("%d\n",sum);</span><span class="token comment">//    printf("%d\n",count);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum <span class="token operator">/</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-5-循环结构之2：while循环"><a href="#2-5-循环结构之2：while循环" class="headerlink" title="2.5 循环结构之2：while循环"></a>2.5 循环结构之2：while循环</h3><h4 id="2-5-1-基本语法"><a href="#2-5-1-基本语法" class="headerlink" title="2.5.1 基本语法"></a>2.5.1 基本语法</h4><p><strong>语法格式：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">①初始化部分<span class="token keyword">while</span><span class="token punctuation">(</span>②循环条件部分<span class="token punctuation">)</span>｛    ③循环体部分<span class="token punctuation">;</span>    ④迭代部分<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><p><img src="/../../images/04/image-20220315013023236.png"></p><p><strong>说明：</strong></p><ul><li>while(循环条件部分)中循环条件为非零值，表示true、真；为零值，表示false、伪。</li><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环<code>可以相互转换</code>。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li>for循环与while循环的区别：<code>初始化条件部分的作用域不同</code>。</li></ul><h4 id="2-5-2-举例"><a href="#2-5-2-举例" class="headerlink" title="2.5.2 举例"></a>2.5.2 举例</h4><p><strong>案例1：</strong>输出5行HelloWorld!</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录1-100所有的偶数的和</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录1-100之间偶数的个数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//迭代条件</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的总和为：%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的个数为：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例3：折纸珠穆朗玛峰</strong></p><pre class="line-numbers language-none"><code class="language-none">世界最高山峰是珠穆朗玛峰，它的高度是8848.86米，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个计数器，初始值为0</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//定义珠穆朗玛峰的高度</span>    <span class="token keyword">int</span> zf <span class="token operator">=</span> <span class="token number">8848860</span><span class="token punctuation">;</span><span class="token comment">//单位：毫米</span>    <span class="token keyword">double</span> paper <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token comment">//单位：毫米</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>paper <span class="token operator">&lt;</span> zf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//在循环中执行累加，对应折叠了多少次</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        paper <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span>    <span class="token punctuation">}</span>    <span class="token comment">//打印计数器的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"需要折叠：%d次\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"折纸的高度为%f米，超过了珠峰的高度"</span><span class="token punctuation">,</span> paper <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 【武汉科技大学2019研】如果有定义：int x＝0，s＝0； 则下面程序段的执行结果是（　　）。</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  s<span class="token operator">+=</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> A．1<br> B．0<br> C．无限循环<br> D．控制表达式非法，无法编译</p><p> 【答案】B</p><p> 【解析】while后面的表达式中，首先执行!运算符，然后再执行!＝运算符，第一次判断中，x＝0则!x!＝0满足条件，进入循环中，执行s += x++，x++是先运算，再自加，执行完后s＝0，x＝1，再回到while的判断条件，判断为false，跳出循环，输出s的值为0，答案选B。</p></blockquote><h3 id="2-6-循环结构之3：do-while循环"><a href="#2-6-循环结构之3：do-while循环" class="headerlink" title="2.6 循环结构之3：do-while循环"></a>2.6 循环结构之3：do-while循环</h3><p>do-while 结构是 while 的变体，它会先执行一次循环体，然后再判断是否满足条件。如果满足的话，就继续执行循环体，否则跳出循环。</p><h4 id="2-6-1-基本语法"><a href="#2-6-1-基本语法" class="headerlink" title="2.6.1 基本语法"></a>2.6.1 基本语法</h4><p><strong>语法格式：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">①初始化部分<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>③循环体部分④迭代部分<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>②循环条件部分<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行过程：</strong>①-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><p><img src="/../../images/04/image-20220512165558698.png"></p><p><strong>说明：</strong></p><ul><li>do{}while();最后有一个分号</li><li>do-while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li><li>循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul><h4 id="2-6-2-举例"><a href="#2-6-2-举例" class="headerlink" title="2.6.2 举例"></a>2.6.2 举例</h4><p><strong>案例1：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span>    <span class="token comment">//初始化部分</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录1-100所有的偶数的和</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录1-100之间偶数的个数</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment">//循环体部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//迭代部分</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//循环条件部分</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的总和为：%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数的个数为：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：</strong>体会do-while至少会执行一次循环体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//while循环:</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello:while\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num1<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//do-while循环:</span>    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello:do-while\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num2<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num2 <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例3：ATM取款</strong></p><pre class="line-numbers language-none"><code class="language-none">声明变量balance并初始化为0，用以表示银行账户的余额，下面通过ATM机程序实现存款，取款等功能。=========ATM========   1、存款   2、取款   3、显示余额   4、退出请选择(1-4)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//初始化条件</span>    <span class="token keyword">double</span> balance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">//表示银行账户的余额</span>    <span class="token keyword">int</span> selection<span class="token punctuation">;</span> <span class="token comment">//记录客户的选择</span>    <span class="token keyword">double</span> addMoney<span class="token punctuation">,</span> minusMoney<span class="token punctuation">;</span> <span class="token comment">//分别记录存钱、取钱的额度</span>    <span class="token keyword">int</span> isFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//用于控制循环的结束</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=========ATM========\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t1、存款\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t2、取款\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t3、显示余额\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t4、退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择(1-4)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>selection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要存款的额度为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>addMoney <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    balance <span class="token operator">+=</span> addMoney<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要取款的额度为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>minusMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minusMoney <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> balance <span class="token operator">&gt;=</span> minusMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    balance <span class="token operator">-=</span> minusMoney<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的数据非法或余额不足\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前的余额为：%lf\n"</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"欢迎下次进入此系统。^_^\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新选择！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-3-小结：三种循环结构"><a href="#2-6-3-小结：三种循环结构" class="headerlink" title="2.6.3 小结：三种循环结构"></a>2.6.3 小结：三种循环结构</h4><ul><li><strong>三种循环结构都具有四个要素：</strong><ul><li>循环变量的初始化条件</li><li>循环条件</li><li>循环体语句块</li><li>循环变量的修改的迭代表达式</li></ul></li></ul><ul><li><strong>从循环次数角度分析</strong><ul><li>do-while循环至少执行一次循环体语句。</li><li>for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li><strong>如何选择</strong><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h3 id="2-7-“无限”循环"><a href="#2-7-“无限”循环" class="headerlink" title="2.7 “无限”循环"></a>2.7 “无限”循环</h3><p><img src="/../../images/04/%E7%B1%BB%E4%BC%BC%EF%BC%9A%E6%AD%BB%E5%BE%AA%E7%8E%AF.jpg"></p><h4 id="2-7-1-基本语法"><a href="#2-7-1-基本语法" class="headerlink" title="2.7.1 基本语法"></a>2.7.1 基本语法</h4><p><strong>语法格式：</strong></p><ul><li>最简单”无限”循环格式：<code>while(1)</code> , <code>for(;;)</code></li></ul><p><strong>适用场景：</strong></p><ul><li>开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li>如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul><h4 id="2-7-2-举例"><a href="#2-7-2-举例" class="headerlink" title="2.7.2 举例"></a>2.7.2 举例</h4><p><strong>案例1：</strong>实现爱你到永远…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我爱你！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//printf("end\n");//永远无法到达的语句</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//循环变量没有修改，条件永远成立，死循环</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我爱你！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：如下代码执行效果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//一次都不执行</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我爱你！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：</strong>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> positiveNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计正数的个数</span>    <span class="token keyword">int</span> negativeNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计负数的个数</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment">//记录输入的整数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//for (;;){</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数(输入为0时结束程序):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            positiveNumber<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            negativeNumber<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"程序结束\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"正数的个数为：%d\n"</span><span class="token punctuation">,</span> positiveNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"负数的个数为：%d\n"</span><span class="token punctuation">,</span> negativeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-嵌套循环-或多重循环"><a href="#2-8-嵌套循环-或多重循环" class="headerlink" title="2.8 嵌套循环(或多重循环)"></a>2.8 嵌套循环(或多重循环)</h3><h4 id="2-8-1-使用说明"><a href="#2-8-1-使用说明" class="headerlink" title="2.8.1 使用说明"></a>2.8.1 使用说明</h4><ul><li><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。<ul><li>外层循环：循环结构A</li><li>内层循环：循环结构B</li></ul></li></ul><p><img src="/../../images/04/image-20230808152109498.png" alt="image-20230808152109498"></p><ul><li>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>。只有当内层循环的循环条件为false（值为0）时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</li><li>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次。</li><li><strong>技巧：</strong>从二维图形的角度看，外层循环控制<code>行数</code>，内层循环控制<code>列数</code>。</li><li><strong>开发经验：</strong>实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</li></ul><p>例如：两个for嵌套循环格式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化语句①<span class="token punctuation">;</span> 循环条件语句②<span class="token punctuation">;</span> 迭代语句⑦<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>初始化语句③<span class="token punctuation">;</span> 循环条件语句④<span class="token punctuation">;</span> 迭代语句⑥<span class="token punctuation">)</span> <span class="token punctuation">{</span>      循环体语句⑤<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//执行过程：① - ② - ③ - ④ - ⑤ - ⑥ - ④ - ⑤ - ⑥ - ... - ④ - ⑦ - ② - ③ - ④ - ⑤ - ⑥ - ④..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行特点：</strong>外层循环执行一次，内层循环执行一轮。</p><h4 id="2-8-2-举例"><a href="#2-8-2-举例" class="headerlink" title="2.8.2 举例"></a>2.8.2 举例</h4><p><strong>案例1：</strong>打印5行6个*</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/*    ******    ******    ******    ******    ******    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例2：</strong>打印5行直角三角形</p><pre class="line-numbers language-none"><code class="language-none">***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例3：</strong>打印5行倒直角三角形</p><pre class="line-numbers language-none"><code class="language-none">ij(*的上限)   i + j = 6  --&gt; j = 6 - i*****   15****24***33**42*51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例4：九九乘法表</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【北京航空航天大学2018研】对于下列for循环语句，请将其改写为功能完全相同的while循环语句。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    count<span class="token operator">+=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【答案】<br>此题可以在定义时先令i＝0，j＝100，在第一层while循环时只需判断i＜100即可，在第二层while循环时只需判断j＞＝i即可，j－＝2放在内层循环体中即可，具体程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    count<span class="token operator">+=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>    j<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-9-break和continue关键字"><a href="#2-9-break和continue关键字" class="headerlink" title="2.9 break和continue关键字"></a>2.9 break和continue关键字</h3><h4 id="2-9-1-使用说明"><a href="#2-9-1-使用说明" class="headerlink" title="2.9.1 使用说明"></a>2.9.1 使用说明</h4><table><thead><tr><th>关键字</th><th>适用范围</th><th>循环结构中的作用</th><th>相同点</th></tr></thead><tbody><tr><td>break</td><td>switch-case</td><td>-</td><td>-</td></tr><tr><td>break</td><td>循环结构</td><td>一旦执行，就结束(或跳出)当前循环结构</td><td>此关键字的后面，不能声明语句</td></tr><tr><td>continue</td><td>循环结构</td><td>一旦执行，就结束(或跳出)当次循环结构</td><td>此关键字的后面，不能声明语句</td></tr></tbody></table><p>代码验证：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//123</span>            <span class="token comment">//continue;//123567910</span>            <span class="token comment">//如下的语句不可能被执行!</span>            <span class="token comment">//printf("今晚迪丽热巴要约我吃饭");</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n####\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//嵌套循环中的使用</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//结束的是包裹break关键字的最近的一层循环！</span>                <span class="token comment">//continue;//结束的是包裹break关键字的最近的一层循环的当次！</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-2-举例"><a href="#2-9-2-举例" class="headerlink" title="2.9.2 举例"></a>2.9.2 举例</h4><p>举例1：在全系1000名学生中举行慈善募捐，当总数达到10万元时就结束，统计此时捐款的人数以及平均每人捐款的数目。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUM</span> <span class="token expression"><span class="token number">100000</span> </span><span class="token comment">//指定符号常量SUM代表10万</span></span><span class="token comment">//在全系1000名学生中举行慈善募捐，当总数达到10万元时就结束，统计此时捐款的人数以及平均每人捐款的数目。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> amount<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//分别代表着每人捐款的数额，总捐款额</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//捐款人数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的捐款额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        total <span class="token operator">=</span> total <span class="token operator">+</span> amount<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;=</span> SUM<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> aver <span class="token operator">=</span> total <span class="token operator">/</span> count<span class="token punctuation">;</span> <span class="token comment">//人均捐款额度</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捐款总人数是：%d\n人均捐款额为：%10.2f\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> aver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：要求输出100～200之间的不能被3整除的数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【华南理工大学2018研】编程求100～200间的全部素数。</p><p>【答案】<br>素数意思是只能被1和本身整除，因此将1到本身之间的数做除数，进行求余，如果余数为0，则不是素数，否则是素数。根据经验，假设所要判断的数为n，则一般只需要判断1到根号n之间的数即可，具体程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录是否有约数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          count<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>【武汉科技大学2019研】以下正确的描述是（　　）。<br>A．从多层循环嵌套中退出时，只能使用break语句<br>B．在循环体内使用continue和break语句，作用相同<br>C．只能在循环体内和switch体内使用break语句<br>D．continue语句的作用是结束整个循环的执行</p><p>【答案】C</p><p>【解析】从多层嵌套中退出不是只能使用break语句，也可以使用return或者程序自己执行完，A错误；在循环体内continue代表不执行该次循环中的剩余未执行语句，break代表直接跳出本层循环，BD错误，答案选C。</p></blockquote><blockquote><p> 【北京航空航天大学2018研】以下关于循环语句的叙述中，正确的是（　　）。<br> A．for循环语句的三个部分必须都要有表达式<br> B．while循环语句的循环体内至少要有一条语句<br> C．do…while循环语句的循环体至少会被执行一次<br> D．continue语句可以退出包含它的整个循环体</p><p> 【答案】C</p><p> 【解析】for循环的三个表达式都可以省略，但是之间的分号不能省略，同时要有退出循环的机制，因此A项错误；while循环语句的循环体内可以为空，并不违反相应语法，只不过循环什么也不执行，因此B项错误；continue语句只是不执行本次循环的剩余语句，而并非退出整个循环，因此D项错误，答案选C。</p></blockquote><h3 id="2-10-goto关键字"><a href="#2-10-goto关键字" class="headerlink" title="2.10 goto关键字"></a>2.10 goto关键字</h3><p>使用goto，可以实现无条件的语句的转移。</p><p><strong>一般格式：</strong> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">goto</span> 标号<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>其中，标号，属于标识符，以“:”为标记，位于某语句前面。</p></blockquote><p>执行 goto 语句后，程序将跳转到指定标号处执行。这样可以随意将控制转移到程序中的任意一条语句上，然后执行它。</p><p><strong>举例1：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loop_label<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> loop_label<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>loop_label是一个标签名，可以放在正常语句的前面。程序执行到 goto 语句，就会跳转到它指定的标签名位置继续执行。因此，上面的代码会产生无限循环。</p><p>实际使用中，goto语句通常与条件语句配合。可用来实现条件转移，跳出循环体等功能。</p><p><strong>举例2：</strong>录入学生成绩，并计算学生的平均分。当输入-1时程序结束。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    next<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第 %d 个学生成绩(输入-1结束)："</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> score<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d个学生的平均分是 %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> sum <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：goto 只能在同一个函数之中跳转，并不能跳转到其他函数。</p></blockquote><p><strong>举例3：</strong>goto 的一个主要用法是跳出多层循环</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>some_error_condition<span class="token punctuation">)</span>          <span class="token keyword">goto</span> bail<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    bail<span class="token operator">:</span><span class="token comment">// ... ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码有很复杂的嵌套循环，不使用 goto 的话，想要完全跳出所有循环，写起来很麻烦。</p><p><strong>举例4：</strong>goto 的另一个用途是提早结束多重判断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERR<span class="token punctuation">)</span>  <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">do_something2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERR<span class="token punctuation">)</span>  <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">do_something3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERR<span class="token punctuation">)</span>  <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">do_something4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERR<span class="token punctuation">)</span>  <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例有四个判断，只要有一个发现错误，就使用 goto 跳过后面的判断。</p><blockquote><p>小结：</p><p>从理论上 goto语句是没有必要的，实践中没有goto语句也可以很容易的写出代码。使用goto反而容易造成程序流程的混乱，致使程序容易出错。故建议不要轻易使用。</p><p>这里只是为了语法的完整，介绍一下它的用法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第02章：变量与进制</title>
      <link href="/2024/04/23/04-c-yu-yan/di-02-zhang-bian-liang-yu-jin-zhi/"/>
      <url>/2024/04/23/04-c-yu-yan/di-02-zhang-bian-liang-yu-jin-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="第02章-变量与进制"><a href="#第02章-变量与进制" class="headerlink" title="第02章_变量与进制"></a>第02章_变量与进制</h2><hr><h3 id="0、本章专题脉络"><a href="#0、本章专题脉络" class="headerlink" title="0、本章专题脉络"></a>0、本章专题脉络</h3><p><img src="/../../images/04/%E7%AC%AC2%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%9B%E5%88%B6.png" alt="专题脉络"></p><h3 id="1、关键字-keyword"><a href="#1、关键字-keyword" class="headerlink" title="1、关键字(keyword)"></a>1、关键字(keyword)</h3><p>定义：<strong>被C语言赋予了特殊含义，用做专门用途的字符串（或单词）。</strong></p><p>特点：全部关键字都是<code>小写字母</code>。</p><p>举例：HelloWorld案例中，出现的关键字有 <code>int</code>、<code>return</code>等，这些单词已经被C语言定义好了。</p><p>传统的C语言（ANSI C）有32个关键字。如下：</p><table><thead><tr><th>类型</th><th>具体关键字</th></tr></thead><tbody><tr><td>控制语句关键字（12 个）</td><td>break, case, continue, default, do, else, for, goto, if, return, switch, while</td></tr><tr><td>数据类型关键字（12 个）</td><td>char, enum, double, long, float, int, short, signed, struct, unsigned, union, void</td></tr><tr><td>存储类型关键字（4 个）</td><td>auto, extern, register, static</td></tr><tr><td>其他关键字（4 个）</td><td>const, sizeof, typedef, volatile</td></tr></tbody></table><p>后续，1999年，C99标准增加了5个关键字：<code>inline</code>、<code>restrict</code>、<code>_Bool</code>、<code>_Complex</code>和<code>_Imaginary</code>。</p><p>2011年，C11标准又增加了7个关键字：<code>_Alignas</code>、<code>_Alignof</code>、<code>_Atomic</code>、<code>_Static_assert</code>、<code>_Noreturn</code>、<code>_Thread_local</code>和<code>_Generic</code>。</p><blockquote><p>说明：</p><p>1、ANSI C、C99和C11，它们之间差别并不大，在大多数情况下，它们都是和谐共处的。</p><p>2、不需要死记硬背，学到哪里记到哪里即可。</p></blockquote><h3 id="2、标识符-Identifier"><a href="#2、标识符-Identifier" class="headerlink" title="2、标识符(Identifier)"></a>2、标识符(Identifier)</h3><p>C语言中变量、函数、数组名、结构体等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）</p><ul><li>只能由26个英文字母大小写，0-9 或 _ 组成</li><li>数字不可以开头</li><li>不可以是关键字，但可以包含关键字</li><li>C99和C11允许使用更长的标识符名，但是编译器只识别前63个字符。(会忽略超出的字符)</li><li>不允许有空格。</li><li>严格区分大小写字母。比如：Hello、hello是不同的标识符。</li></ul><p><strong>标识符的命名建议</strong>（建议遵守的<code>软性要求</code>）</p><ul><li><p>在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。如：sum，name，max，year，total 等。</p></li><li><p>不要出现仅靠大小写区分不同的标识符。如：name、Name 容易混淆</p></li><li><p>尽量避免名字中出现数字编号，如value1、value2等，除非逻辑上需要编号。</p></li><li><p>习惯上，所有宏定义、枚举常数、常量(只读变量)全用大写字母命名，用下划线分隔单词。</p><p>比如： const double TAX_RATE = 0.08; //TAX_RATE 只读变量</p></li><li><p>系统内部使用了一些下划线开头的标识符（比如两个下划线开头的变量名、一个下划线 + 大写英文字母开头的变量名）。比如，C99 标准添加的类型 <code>_Bool</code>。为防止冲突，建议用户尽量避免使用下划线开头的标识符。</p></li><li><p>下划线通常用于连接一个比较长的变量名。如：max_classes_per_student。</p></li><li><p>变量名、函数名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz (驼峰法，小驼峰)。比如：<code>short stuAge = 20; </code>，<code>tankShotGame</code>。</p></li></ul><p>举例：合法的标识符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a、BOOK1、_sun、MAX_SIZE、Mouse、student23、Football、FOOTBALL、max、_add、num_1、sum_of_numbers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：非法的标识符：</p><pre class="line-numbers language-none"><code class="language-none">$zj、3sum、ab#cd、23student、Foot-baii、s.com、b＆c、j**p、book-1、tax rate、don't<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】</p><p>以下均是合法变量名的是（　）。<br>A．#name   total<br>B．node 　value_max<br>C．_var 　long<br>D．stu－code   a＋b</p><p>【答案】B</p><p>【解析】C语言中变量名只能包含数字，字母和下划线，且只能以字母和下划线开始。A项含非法字符#，错误；C中long为关键字，变量不能以关键字命名；D中含非法字符－和＋。</p></blockquote><blockquote><p> 【四川大学2017研】以下不合法的用户标识符是（　　）。<br> A．J2_KEY<br> B．Double<br> C．4d<br> D．_8_</p><p> 【答案】C</p><p> 【解析】标识符只能包含数字，字母，下划线，且不能以数字开头，选项C错误。</p></blockquote><blockquote><p>练习</p><p>下列定义变量的语句中错误的是（　　）。<br>A．double int_；<br>B．float US$；<br>C．char For；<br>D．int _int；</p><p>【答案】B【解析】标识符由字母、数字、下划线组成。$是非法字符，不能出现在标识符中。答案选择B选项。</p></blockquote><h3 id="3、变量-variable"><a href="#3、变量-variable" class="headerlink" title="3、变量(variable)"></a>3、变量(variable)</h3><h4 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h4><p><img src="/../../images/04/image-20220513235020527.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="/../../images/04/image-20220513235828042.png" alt="image-20220513235828042"></p><h4 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h4><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。</p></li><li><p>通过变量名，可以访问这块内存区域，获取里面存储的值。</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>C语言中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><p><img src="/../../images/04/image-20230620171948703.png" alt="image-20230620171948703"></p></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>C语言中每个变量必须先声明，后使用。</li><li>不同的数据类型，占用的空间大小不一样。</li><li>一旦声明，变量的类型就不能在运行时修改。</li></ul></li></ul><h4 id="3-3-变量的声明与赋值"><a href="#3-3-变量的声明与赋值" class="headerlink" title="3.3 变量的声明与赋值"></a>3.3 变量的声明与赋值</h4><h5 id="步骤1：变量的声明"><a href="#步骤1：变量的声明" class="headerlink" title="步骤1：变量的声明"></a>步骤1：变量的声明</h5><p>格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">数据类型  变量名<span class="token punctuation">;</span>  <span class="token comment">//声明变量的语句必须以分号结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> width<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> width<span class="token punctuation">,</span>height<span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="步骤2：变量的赋值"><a href="#步骤2：变量的赋值" class="headerlink" title="步骤2：变量的赋值"></a>步骤2：变量的赋值</h5><p>变量声明时，就为它分配内存空间，但是不会清除内存里面原来的值。这导致声明变量以后，变量会是一个随机的值。所以，变量一定要赋值以后才能使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//变量的声明</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token comment">//变量的赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>变量的声明和赋值，也可以写在一行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多个相同类型变量的赋值，可以写在同一行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//连续赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：声明变量以后，不用忘记初始化赋值！定义变量时编译器并不一定清空了这块内存，它的值可能是无效的数据，运行程序，会异常退出。</p></blockquote><h4 id="3-4-变量的作用域-scope"><a href="#3-4-变量的作用域-scope" class="headerlink" title="3.4 变量的作用域(scope)"></a>3.4 变量的作用域(scope)</h4><ul><li><p>变量的作用域：其定义所在的一对{ }内。</p></li><li><p>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</p></li><li><p>同一个作用域内，不能定义重名的变量。</p></li><li><p>C 语言的变量作用域主要有两种：文件作用域（file scope）和块作用域（block scope）。</p></li></ul><p><code>文件作用域（file scope）</code>指的是，在源码文件顶层声明的变量，从声明的位置到文件结束都有效。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>块作用域（block scope）</code>指的是由大括号（ {} ）组成的代码块，它形成一个单独的作用域。凡是在块作用域里面声明的变量，只在当前代码块有效，代码块外部不可见。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10 20</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 超出作用域，报错</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最常见的块作用域就是函数，函数内部声明的变量，对于函数外部是不可见的。 for 循环也是一个块作用域，循环变量只对循环体内部可见，外部是不可见的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 超出作用域，报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-变量按类型的分类"><a href="#3-5-变量按类型的分类" class="headerlink" title="3.5 变量按类型的分类"></a>3.5 变量按类型的分类</h4><p>变量可以按<code>数据类型</code>来分，也可以按<code>声明的位置</code>来分（全局变量、局部变量）。本节主讲变量的不同类型。</p><p>C 语言中的变量按照数据类型分为：</p><p><img src="/../../images/04/image-20230810152811098.png" alt="image-20230810152811098"></p><blockquote><p>注意1：这里列举的是C语言的常用类型，后续C语言版本还有新增的类型。</p><p>注意2：空类型：void 表示空类型（无类型）。通常应用于函数的返回值类型、函数的参数、指针类型。</p><p>注意3：在C语言中，没有<code>字符串类型</code>，使用字符数组表示字符串。</p></blockquote><h3 id="4、基本数据类型"><a href="#4、基本数据类型" class="headerlink" title="4、基本数据类型"></a>4、基本数据类型</h3><h4 id="4-1-整数类型"><a href="#4-1-整数类型" class="headerlink" title="4.1 整数类型"></a>4.1 整数类型</h4><h5 id="4-1-1-类型说明"><a href="#4-1-1-类型说明" class="headerlink" title="4.1.1 类型说明"></a>4.1.1 类型说明</h5><ul><li><p>C语言规定了如下的几类整型：短整型(short)、整型(int)、长整型(long)、更长的整型(long long)</p></li><li><p>每种类型都可以被 signed 和unsigned 修饰。其中，</p><ul><li>使用 <code>signed 修饰</code>，表示该类型的变量是带符号位的，有正负号，可以表示负值。<code>默认是signed</code>。</li><li>使用 <code>unsigned 修饰</code>，表示该类型的变量是不带符号位的，没有有正负号，只能表示零和正整数。</li></ul></li><li><p>bit(位)：计算机中的最小存储单位。</p><p>byte(字节)：计算机中基本存储单元。</p><p>1byte = 8bit</p></li></ul><table><thead><tr><th>类型</th><th>修饰符</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short [int]</td><td>signed</td><td>2个字节(=16位)</td><td>-32768 ~ 32767 (-$2^{15}$ ~ $2^{15}$-1)</td></tr><tr><td>short [int]</td><td>unsigned</td><td>2个字节(=16位)</td><td>0 ~ 65535  (0 ~ $2^{16}$-1)</td></tr><tr><td>int</td><td>signed</td><td>通常4个字节</td><td>-2147483648 ~ 2147483647 (-$2^{31}$ ~ $2^{31}$-1)</td></tr><tr><td>int</td><td>unsigned</td><td>通常4个字节</td><td>0 ~ 4294967295  (0 ~ $2^{32}$-1)</td></tr><tr><td>long [int]</td><td>signed</td><td>4个或8个字节</td><td>4字节时：-2147483648 ~ 2147483647 (-$2^{31}$ ~ $2^{31}$-1)</td></tr><tr><td>long [int]</td><td>unsigned</td><td>4个或8个字节</td><td>4字节时：-0 ~ 4294967295  (0 ~ $2^{32}$-1)</td></tr></tbody></table><p>long long int是<code>C99新增</code>的：</p><table><thead><tr><th>类型</th><th>修饰符</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>long long [int]</td><td>signed</td><td>8个字节(=64位)</td><td>-9223372036854775808~ 9223372036854775807(-$2^{63}$ ~ $2^{63}$-1)</td></tr><tr><td>long long [int]</td><td>unsigned</td><td>8个字节(=64位)</td><td>0 ~ 18446744073709551615(0 ~ $2^{64}$-1)</td></tr></tbody></table><blockquote><p>说明1：不同计算机的 int 类型的大小是不一样的。比较常见的是使用4个字节（32位）存储一个 int 类型的值，具体情况如下：</p></blockquote><table><thead><tr><th>类型</th><th>16位编译器</th><th>32位编译器</th><th>64位编译器</th></tr></thead><tbody><tr><td>short int</td><td>2字节</td><td>2字节</td><td>2字节</td></tr><tr><td>int</td><td>2字节</td><td>4字节</td><td>4字节</td></tr><tr><td>unsigned int</td><td>2字节</td><td>4字节</td><td>4字节</td></tr><tr><td>long</td><td>4字节</td><td>4字节</td><td>8字节</td></tr><tr><td>unsigned long</td><td>4字节</td><td>4字节</td><td>8字节</td></tr><tr><td>long long</td><td>8字节</td><td>8字节</td><td>8字节</td></tr></tbody></table><blockquote><p>说明2：C标准虽然没有具体规定各种类型数据所占用存储单元的长度，但几条铁定的原则（ANSI/ISO制订的）：<br>① sizeof(short int) ≤ sizeof(int) ≤ sizeof(long int) ≤ sizeof(long long)，具体由各编译系统自行决定的。其中，sizeof是测量类型或变量长度的运算符。</p><p>② short int至少应为2字节，long int至少应为4字节。</p></blockquote><p>这样约定的好处就是使得C语言可以长久使用。<code>现在的主流CPU是64位</code>，可以预测不久的将来会推出128位甚至256位的CPU，但是在C语言刚刚出现的时候，CPU还是以8位和16位为主。如果那时候就将整型定死为8位或16位，那么现在我们肯定不会再学习C语言了。</p><blockquote><p>说明3：</p><p>最常用的整型类型为：int类型。</p><p>整数型常量，默认为int类型。</p></blockquote><h5 id="4-1-2-举例"><a href="#4-1-2-举例" class="headerlink" title="4.1.2 举例"></a>4.1.2 举例</h5><p>举例1：对于 int 类型，默认是带有正负号的。即 int 等同于 signed int 。一般情况下，关键字signed省略不写。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token comment">//声明了一个带符号的整数变量 m </span><span class="token comment">// 等同于</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>   <span class="token comment">//声明了一个带符号的整数变量 m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例2：int 类型也可以不带正负号，只表示非负整数。这时就必须使用关键字 unsigned 声明变量。表数范围为：0~4294967295</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>   <span class="token comment">//声明了一个不带符号的整数变量a，表数范围为：0~4294967295</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>unsigned int 里面的 int 可以省略，所以上面的变量声明也可以写成这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例3：</p><p>int 类型使用4个字节表示一个整数，对于小整数，这样做很浪费空间。另一方面，某些场合需要更大的整数，8个字节还不够。此时，可以使用short int （简写为 short ）、long int （简写为 long ）、long long int （简写为 long long ）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认情况下， short 、 long 、 long long 都是带符号的（signed），即 signed 关键字可以省略。代码简写为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">short</span> a<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它们也可以声明为不带符号（unsigned），使得能够表示的最大值扩大一倍。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">short</span> a<span class="token punctuation">;</span>  <span class="token comment">//无符号短整型，表数范围：0~65535</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>   <span class="token comment">//无符号长整型，表数范围：0~4294967295</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>  <span class="token comment">//无符号长整型，表数范围：0~18446744073709551615</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-1-3-关于后缀"><a href="#4-1-3-关于后缀" class="headerlink" title="4.1.3 关于后缀"></a>4.1.3 关于后缀</h5><p>编译器将一个整数字面量指定为 int 类型，但是如果希望将其指定为 long 类型，需要在该字面量末尾加上后缀 <code>l</code> 或 <code>L</code> ，编译器会把这个字面量的类型指定为 long 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span> <span class="token comment">//或者写成 123l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望字面量指定为long long类型，则后缀以<code>ll</code>或<code>LL</code>结尾。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> y <span class="token operator">=</span> <span class="token number">123LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望指定为无符号整数 unsigned int ，可以使用后缀 <code>u</code> 或 <code>U</code> 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">123U</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>L 和 U 可以结合使用，表示 unsigned long 类型。 L 和 U 的大小写和组合顺序无所谓。</p><p>u 还可以与其他整数后缀结合，放在前面或后面都可以，比如 10UL 、 10ULL 和 10LLU 都是合法的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>      x <span class="token operator">=</span> <span class="token number">1234UL</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1234ULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-1-4-精确宽度类型-了解"><a href="#4-1-4-精确宽度类型-了解" class="headerlink" title="4.1.4 精确宽度类型(了解)"></a>4.1.4 精确宽度类型(了解)</h5><p>C 语言的整数类型（short、int、long）在不同计算机上，占用的字节宽度可能是不一样的，无法提前知道它们到底占用多少个字节。程序员有时控制准确的字节宽度，这样的话，代码可以有更好的可移植性，头文件 stdint.h 创造了一些新的类型别名。</p><p>**精确宽度类型(exact-width integer type)**：保证某个整数类型的宽度是确定的。</p><ul><li><p>int8_t ：8位有符号整数</p></li><li><p>int16_t ：16位有符号整数</p></li><li><p>int32_t ：32位有符号整数</p></li><li><p>int64_t ：64位有符号整数</p></li><li><p>uint8_t ：8位无符号整数</p></li><li><p>uint16_t ：16位无符号整数</p></li><li><p>uint32_t ：32位无符号整数</p></li><li><p>uint64_t ：64位无符号整数</p></li></ul><p>上面这些都是类型别名，编译器会指定它们指向的底层类型。比如，某个系统中，如果 int 类型为32位， int32_t 就会指向 int ；如果 long 类型为32位， int32_t 则会指向 long 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">int32_t</span> x32 <span class="token operator">=</span> <span class="token number">45933945</span><span class="token punctuation">;</span>  <span class="token comment">//变量 x32 声明为 int32_t 类型，可以保证是32位的宽度。</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x32 = %d\n"</span><span class="token punctuation">,</span> x32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-1-5-整型的极限值-了解"><a href="#4-1-5-整型的极限值-了解" class="headerlink" title="4.1.5 整型的极限值(了解)"></a>4.1.5 整型的极限值(了解)</h5><p>有时候需要查看，当前系统不同整数类型的最大值和最小值，C 语言的头文件 <code>limits.h</code> 提供了相应的常量。比如：INT_MIN 代表 signed int 类型的最小值 -2147483648， INT_MAX 代表 signed int 类型的最大值 2147483647。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> INT_MIN  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -2147483648</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> INT_MAX  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2147483647</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了代码的可移植性，需要知道某种整数类型的极限值时，应该尽量使用这些常量。</p><ul><li><p>SCHAR_MIN ， SCHAR_MAX ：signed char 的最小值和最大值。</p></li><li><p>SHRT_MIN ， SHRT_MAX ：short 的最小值和最大值。</p></li><li><p>INT_MIN ， INT_MAX ：int 的最小值和最大值。</p></li><li><p>LONG_MIN ， LONG_MAX ：long 的最小值和最大值。</p></li><li><p>LLONG_MIN ， LLONG_MAX ：long long 的最小值和最大值。</p></li><li><p>UCHAR_MAX ：unsigned char 的最大值。</p></li><li><p>USHRT_MAX ：unsigned short 的最大值。</p></li><li><p>UINT_MAX ：unsigned int 的最大值。</p></li><li><p>ULONG_MAX ：unsigned long 的最大值。</p></li><li><p>ULLONG_MAX ：unsigned long long 的最大值。</p></li></ul><h4 id="4-2-浮点类型"><a href="#4-2-浮点类型" class="headerlink" title="4.2 浮点类型"></a>4.2 浮点类型</h4><h5 id="4-2-1-类型说明"><a href="#4-2-1-类型说明" class="headerlink" title="4.2.1 类型说明"></a>4.2.1 类型说明</h5><p>浮点型变量，也称为实型变量，用来存储小数数值的。因为32位浮点数提供的精度或者数值范围还不够，C 语言又提供了另外两种更大的浮点数类型。</p><p>在C语言中，浮点型变量分为三种：单精度浮点型(float)、双精度浮点型(double)、长双精度浮点型(long double)。</p><table><thead><tr><th>类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4个字节 (=32位)</td><td>$-1.4<em>10^{-45}$ ~ $-3.4</em>10^{+38}$，$1.4<em>10^{-45}$ ~ $3.4</em>10^{+38}$</td></tr><tr><td>double</td><td>8个字节 (=64位)</td><td>$-4.9<em>10^{-324}$ ~ $-1.7</em>10^{+308}$，$4.9<em>10^{-324}$ ~ $1.7</em>10^{+308}$</td></tr><tr><td>long double</td><td>12个字节(=96位)</td><td>太大了…</td></tr></tbody></table><p>其中，</p><table><thead><tr><th>类型</th><th>16位编译器</th><th>32位编译器</th><th>64位编译器</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>4字节</td><td>4字节</td></tr><tr><td>double</td><td>8字节</td><td>8字节</td><td>8字节</td></tr></tbody></table><p>C语言的第3种浮点类型是long double，以满足比double类型更高的精度要求。不过，C只保证long double类型至少与double类型的精度相同。</p><p>浮点型变量不能使用signed或unsigned修饰符。</p><p>最常用的浮点类型为：double 类型，因为精度比float高。</p><p>浮点型常量，默认为 double 类型。</p><p><strong>关于后缀：</strong></p><p>对于浮点数，编译器默认指定为 double 类型，如果希望指定为float类型，需要在小数后面添加后缀 <code>f</code>或<code>F</code>；如果希望指定为long double类型，需要在小数后面添加后缀 <code>l</code>或<code>L</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> x       <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span><span class="token keyword">double</span> x      <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">3.14L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-2-2-举例"><a href="#4-2-2-举例" class="headerlink" title="4.2.2 举例"></a>4.2.2 举例</h5><p><strong>举例1：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">123.4f</span><span class="token punctuation">;</span>　　<span class="token comment">//后面必须加上字母f</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">101.1</span><span class="token punctuation">;</span>　<span class="token comment">//后面可以省略字母d</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">299.4</span><span class="token punctuation">;</span>　　<span class="token comment">//后面可以加上字母d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong></p><p>C 语言允许使用科学计数法表示浮点数，使用字母 e 来分隔小数部分和指数部分。注意，e 的前后，不能存在空格。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">123.456e+3</span><span class="token punctuation">;</span> <span class="token comment">// 123.456 x 10^3</span><span class="token comment">// 等同于</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">123.456e3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外，科学计数法的小数部分如果是 0.x 或 x.0 的形式，那么 0 可以省略。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0.3E6</span><span class="token comment">// 等同于</span><span class="token number">.3E6</span>    <span class="token number">3.0E6</span><span class="token comment">// 等同于</span><span class="token number">3.E6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例3：</strong>可以在常量的末尾加专用字符，强制指定常量的类型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14159f</span><span class="token punctuation">;</span> <span class="token comment">//把此3.14159按单精度浮点常量处理</span><span class="token keyword">long</span> <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">1.23L</span><span class="token punctuation">;</span> <span class="token comment">//把此1.23作为long double型处理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>举例4：</strong></p><p>有人用温度计测量出用华氏法表示的温度(如64°F），今要求把它转换为以摄氏法表示的温度(如17.8℃)。转换的公式为：$c = \frac{5}{9}(f - 32)$。</p><p>其中，f 代表华氏温度，c 代表摄氏温度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> f<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">//定义f和c分别表示华氏温度、摄氏温度</span>    f <span class="token operator">=</span> <span class="token number">64.0</span><span class="token punctuation">;</span> <span class="token comment">//指定f的值</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//利用公式计算c的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f=%f\nc=%f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出c的值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-3-存储规则-了解"><a href="#4-2-3-存储规则-了解" class="headerlink" title="4.2.3 存储规则(了解)"></a>4.2.3 存储规则(了解)</h5><p>任何有小数点的数值，都会被编译器解释为浮点数。所谓“浮点数”就是使用 m * b^e 的形式，存储一个数值， m 是小数部分， b 是基数， e 是指数部分。</p><p><strong>从十进制的角度：</strong></p><p><img src="/../../images/04/1688554845769.png" alt="1688554845769"></p><p><strong>从二进制的角度：</strong></p><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：$(-1)^S * M * 2^E$</p><p>其中：</p><ul><li><p>$(-1)^s$表示符号位，当s=0，V为正数；当s=1，V为负数。</p></li><li><p>M表示有效数字，大于等于1，小于2。</p></li><li><p>$2^E$表示指数位。</p></li></ul><p>举例来说：</p><p>十进制的5.0，写成二进制是 101.0 ，相当于 1.01×2^2 。即，按照上面V的格式，可以得出s=0，M=1.01，E=2。</p><p>十进制的-5.0，写成二进制是 -101.0 ，相当于 -1.01×2^2 。即，s=1，M=1.01，E=2。</p><p><code>IEEE 754规定：</code></p><p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><p><img src="/../../images/04/1688626607436.png" alt="1688626607436"></p><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><p><img src="/../../images/04/1688626635111.png" alt="1688626635111"></p><p>浮点数的存储方式，决定了浮点数精度控制在一定范围内。有效数字部分可能丢失，造成精度损失。</p><h4 id="4-3-字符类型"><a href="#4-3-字符类型" class="headerlink" title="4.3 字符类型"></a>4.3 字符类型</h4><p>C语言中，使用 char 关键字来表示字符型，用于存储一个<code>单一字符</code>。</p><p>字符型变量赋值时，需要用一对英文半角格式的单引号（<code>''</code>）把字符括起来。</p><p>每个字符变量，在16位、32位或64位编译器中都是<code>占用 1 个字节(=8位)</code>。</p><p><strong>表示方式1：最常见</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>　<span class="token comment">//为一个char类型的变量赋值字符'A'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个字符对应一个整数（由 ASCII 码确定），比如 A 对应整数 65 。</p><p>只要在字符类型的范围之内，整数与字符是可以互换的，都可以赋值给字符类型的变量。</p><p><strong>表示方式2：ASCII 码值</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两个字符类型的变量可以进行数学运算。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 char a = 66;</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 char b = 67;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出133</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>常见的ASCII值与对应的字符如下：(ASCII数值范围为0-127)</code></p><p><img src="/../../images/04/image-20220513095907601.png" alt="image-20220513095907601"></p><blockquote><p>ASCII码：上个世纪60年代，美国制定了一套字符编码，对<strong>英语字符</strong>与<strong>二进制位之间的关系</strong>，做了统一规定。这被称为ASCII码。ASCII码一共规定了<strong>127</strong>个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0，也就是说，ASCII虽然用8位二进制编码表示字符，但是其有效位为7位。</p></blockquote><p>举例1：字符′1′和整数1是不同的概念。（参看ASCII码表）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %d\n"</span><span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c1 = 1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c2 = %d\n"</span><span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c2 = 49</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token char">'?'</span><span class="token punctuation">;</span> <span class="token comment">//定义c为字符型变量并使初值为字符'?'。'?'的ASCII代码是63，系统把整数63赋给变量c。</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用"%d"格式输出十进制整数63，用"%c"格式输出字符'?'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>signed 和 unsigned 修饰：</strong></p><p>根据C90标准，C语言允许在关键字char前面使用signed或unsigned。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// 范围为 -128 到 127</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// 范围为 0 到 255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，C 语言规定 char 类型默认是否带有正负号，由当前系统决定，这一点与 int 不同， int 等同于 signed int 。这就是说， char 不等同于signed char ，它有可能是 signed char（范围-128 到 127） ，也有可能是 unsigned char （范围0 到255）。不管是哪种，范围都正好都能覆盖 0 到 127 的 ASCII 字符范围。</p><p><strong>表示方式3：使用转义字符</strong></p><p>单引号本身也是一个字符，如果要表示这个字符常量，必须使用反斜杠转义。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> t <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>char还可以用来表示转义字符。比如：</p><table><thead><tr><th>字符形式</th><th>含义</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符（光标移动到下行行首）</td></tr><tr><td><code>\t</code></td><td>水平制表符，光标移到下一个Tab位置</td></tr><tr><td><code>\'</code></td><td>单引号字符 ‘</td></tr><tr><td><code>\"</code></td><td>双引号字符 “</td></tr><tr><td><code>\\</code></td><td>反斜杠字符 ’\’</td></tr><tr><td><code>\r</code></td><td>回车符，光标移到本行开头</td></tr><tr><td><code>\0</code></td><td>null 字符，代表没有内容。注意，这个值不等于数字0。</td></tr><tr><td><code>\b</code></td><td>退格键，光标回退一个字符，但不删除字符</td></tr></tbody></table><h4 id="4-4-布尔类型"><a href="#4-4-布尔类型" class="headerlink" title="4.4 布尔类型"></a>4.4 布尔类型</h4><p>C语言标准（C89）没有为布尔值单独设置一个类型，所以在判断真假时，使用整数 0 表示假，所有非0表示真。比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> handsome <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handsome<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我好帅!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述做法不直观，可以借助于C语言的宏定义处理。比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义布尔类型的宏</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BOOL</span> <span class="token expression"><span class="token keyword">int</span>   </span><span class="token comment">//可以使用 typedef int BOOL; 替换</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BOOL handsome <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handsome<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"好帅~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，C99 标准添加了类型 <code>_Bool</code>，表示布尔值，即逻辑值true和false。但是，这个类型的值其实只是整数类型的别名，还是使用 0 表示false， 1 表示true，其它非0的值都会被存储为1。所以_Bool类型实际上也是一种整数类型。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">_Bool</span> isFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好毒~~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与此同时，C99还提供了一个头文件 stdbool.h，文件中定义了<code>bool</code>代表<code>_Bool</code>，并且定义了 true 代表 1 、 false 代表 0 。只要加载这个头文件，就可以使用 bool 定义布尔值类型，以及 false 和 true 表示真假。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool isFlag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好毒~~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】</p><p>以下选项中不属于C语言类型的是（　　）。<br>A．short int<br>B．unsigned long int<br>C．char<br>D．bool</p><p>【答案】D</p><p>【解析】C语言中没有bool型，只有C++才有boolean型，也称bool。C语言中一般用“0”表示“假”，用“1”表示“真”。</p></blockquote><blockquote><p>【四川大学2017研】有4个圆塔，圆心分别为（2，2）、（－2，2）、（－2，－2）、（2，－2），圆半径为1。这4个塔的高度为10m，塔以外无建筑物。今输入任一点的坐标，求该点的建筑高度（塔外的高度为零）。</p><p>【答案】<br>N-S图如图1所示。</p><p><img src="/../../images/04/1691981968969-1692326077435.png" alt="1691981968969"></p><p>​图1　计算某点建筑高度的N-S流程图<br>程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> x1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> x3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> x4 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token comment">//表示随意选中的一个点的坐标</span><span class="token keyword">float</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">;</span> <span class="token comment">//(x,y)这个点的坐标到各个圆心的距离</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个点(x,y)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f,%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>d1 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求该点到各中心点距离</span>d2 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>d3 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>d4 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x4<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x4<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y4<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d2 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d3 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d4 <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//判断该点是否在塔外  </span>  h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该点高度为%d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5、变量间的运算规则"><a href="#5、变量间的运算规则" class="headerlink" title="5、变量间的运算规则"></a>5、变量间的运算规则</h3><p>在C语言编程中，经常需要对不同类型的数据进行运算，运算前需要先转换为同一类型，再运算。为了解决数据类型不一致的问题，需要对数据的类型进行转换。</p><h4 id="5-1-隐式类型转换"><a href="#5-1-隐式类型转换" class="headerlink" title="5.1 隐式类型转换"></a>5.1 隐式类型转换</h4><p><strong>情况1：窄类型自动转为宽类型</strong></p><p>即，系统自动将<code>字节宽度较小</code>的类型转换为<code>字节宽度较大</code>的数据类型，它是由系统自动转换完成的。</p><p><img src="/../../images/04/image-20220523162200891.png"></p><p>基本数据类型的转换规则如图所示：</p><p><img src="/../../images/04/1688632254232.png"></p><blockquote><p>注意：最好避免无符号整数与有符号整数的混合运算。因为这时 C 语言会自动将 signed int 转为unsigned int ，可能不会得到预期的结果。</p></blockquote><p>举例1：</p><ul><li>不同的整数类型混合运算时，宽度较小的类型会提升为宽度较大的类型。比如 short 转为 int ，int 转为 long 等。</li><li>不同的浮点数类型混合运算时，宽度较小的类型转为宽度较大的类型，比如 float 转为double ， double 转为 long double 。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//整数赋值给浮点数变量时，会自动转为浮点数。结果24.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//char类型 与 int类型运算，会自动提升为 int 。</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> c <span class="token operator">+</span> i<span class="token punctuation">;</span>  <span class="token comment">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    <span class="token comment">//ok</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> s1<span class="token punctuation">;</span> <span class="token comment">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> i <span class="token operator">+</span> d1<span class="token punctuation">;</span> <span class="token comment">//系统自动将i的类型由int转换为double类型，故i+d1结果为double类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> d<span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">1.5F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例2：</p><p>两个相同类型的整数运算时，或者单个整数的运算，一般来说，运算结果也属于同一类型。但是有例外，宽度小于 int 的类型，运算结果会自动提升为 int 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> c1 <span class="token operator">+</span> s1<span class="token punctuation">;</span>  <span class="token comment">//char类型和short类型的变量运算的结果默认为int类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span>     <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：表达式 a - 5 和 b + c 都会自动转为 int 类型，所以函数 do_something() 会执行两次。</p><p><strong>情况2：宽类型赋值给窄类型</strong></p><p><code>字节宽度较大</code>的类型，赋值给<code>字节宽度较小</code>的变量时，会发生类型降级，自动转为后者的类型。这时可能会发生截值（truncation），系统会自动截去多余的数据位，导致精度损失。</p><blockquote><p>这反映了C语言在检查类型匹配方面不太严格。最好不要养成这样的习惯。</p></blockquote><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> pi<span class="token punctuation">;</span> <span class="token comment">// i 的值为 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C编译器把浮点数转换成整数时，会直接丢弃（截断）小数部分，而不进行四舍五入。</p><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">//浮点数赋予整数变量时，C 语言直接丢弃小数部分。结果 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> cost <span class="token operator">=</span> <span class="token number">12.99</span><span class="token punctuation">;</span>          <span class="token comment">// double类型的值转为int类型,结果为：12</span><span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.1415926536</span><span class="token punctuation">;</span>     <span class="token comment">// double类型的值转为float类型,结果为：3.141593</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">322</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// ch 的值是 66</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>图示：</p><p><img src="/../../images/04/image-20230626213244132.png"></p><p><img src="/../../images/04/image-20230626213317271.png"></p><p>举例4：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span> <span class="token comment">//ok</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">4.58667435</span><span class="token punctuation">;</span>f1 <span class="token operator">=</span> d2<span class="token punctuation">;</span> <span class="token comment">// 出现精度损失 (double -&gt; float )</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f1=%.8f"</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 期望： 4.58667435</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于存在精度限制，浮点数只是一个近似值，它的计算是不精确的。</p><p>举例5：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">//3.14159为双精度浮点常量，分配8个字节；a为float变量，分配4个字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译时系统会发出警告(warning: truncation from ′const double′ to′float′)，提醒用户注意这种转换可能损失精度。</p><h4 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h4><p>隐式类型转换中的宽类型赋值给窄类型，编译器是会产生警告的，提示程序存在潜在的隐患。如果非常明确地希望转换数据类型，就需要用到<code>强制(或显式)类型转换</code>。</p><p>形式： <strong>(类型名称)(变量、常量或表达式)</strong></p><p>功能：将“变量、常量或表达式”的运算结果强制转换为“类型名称”所表示的数据类型。</p><p>注意：强制类型转换会导致精度损失。</p><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">//将变量x的值转换成int后,再与y相加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将浮点数转换为整数时，将舍弃浮点数的小数部分，只保留整数部分。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> f1<span class="token punctuation">,</span>f2<span class="token punctuation">;</span>f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.2</span> <span class="token operator">+</span> <span class="token number">3.4</span><span class="token punctuation">;</span>f2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1.2</span> <span class="token operator">+</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f1=%f,f2=%f"</span><span class="token punctuation">,</span>f1<span class="token punctuation">,</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：f1=4.4，f2=4.0。</p><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">40000</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-25536</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// (long) 将 10 显式转为 long 类型。这里的显示转换其实是不必要的,因为可以自动转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3-运算的溢出问题"><a href="#5-3-运算的溢出问题" class="headerlink" title="5.3 运算的溢出问题"></a>5.3 运算的溢出问题</h4><p>每一种数据类型都有数值范围，如果存放的数值超出了这个范围（小于最小值或大于最大值），需要更多的二进制位存储，就会发生溢出。大于最大值，叫做<code>向上溢出（overflow）</code>；小于最小值，叫做<code>向下溢出（underflow）</code>。</p><p>一般来说，编译器不会对溢出报错，会正常执行代码，但是会忽略多出来的二进制位，只保留剩下的位，这样往往会得到意想不到的结果。所以，应该避免溢出。</p><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> x 是 unsign char 类型，最大值是255 （二进制 11111111 ），加 1 后就发生了溢出， 256 （二进制 100000000 ）的最高位 1 被丢弃，剩下的值就是 0 。</p><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ui <span class="token operator">=</span> UINT_MAX<span class="token punctuation">;</span>  <span class="token comment">// 4,294,967,295</span>ui<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ui = %u\n"</span><span class="token punctuation">,</span> ui<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>ui<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ui = %u\n"</span><span class="token punctuation">,</span> ui<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4,294,967,295</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量 UINT_MAX 是 unsigned int 类型的最大值。如果加 1 ，对于该类型就会溢出，从而得到 0 ；而 0 是该类型的最小值，再减 1 ，又会得到 UINT_MAX 。</p><blockquote><p>溢出很容易被忽视，编译器又不会报错，所以必须非常小心。</p></blockquote><h3 id="6、常量"><a href="#6、常量" class="headerlink" title="6、常量"></a>6、常量</h3><h4 id="6-1-常量分类"><a href="#6-1-常量分类" class="headerlink" title="6.1 常量分类"></a>6.1 常量分类</h4><p>程序运行时，其值不能改变的量，即为<code>常量</code>。</p><p>C语言中的常量分为以下以下几种：</p><ul><li>字面常量</li><li>#define 定义的标识符常量</li><li>const 修饰的常变量</li><li>枚举常量</li></ul><p>举例：字面常量</p><p>1、2、12是整型常量，2.1、12.5、3.14是实型常量，’a’、 ‘b’、’c’是字符型常量。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//字面常量</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//字面常量</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//字面常量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-多种方式定义常量"><a href="#6-2-多种方式定义常量" class="headerlink" title="6.2 多种方式定义常量"></a>6.2 多种方式定义常量</h4><h5 id="6-2-1-使用-define"><a href="#6-2-1-使用-define" class="headerlink" title="6.2.1 使用#define"></a>6.2.1 使用#define</h5><p>这种方式是在文件开头用 #define 来定义常量，也叫作“宏定义”。所谓宏定义，<strong>就是用一个标识符来表示一个常量值</strong>，如果在后面的代码中出现了该标识符，那么编译时就全部替换成指定的常量值。即用宏体替换所有宏名，简称<code>宏替换</code>。</p><p>定义格式：<code>#define 符号常量名 常量值</code></p><ul><li>符号常量名，称为<code>宏体</code>，属于标识符，一般定义时用大写字母表示。</li><li>常量值，称为<code>宏名</code>，可以是数值常量，也可以是字符常量。</li></ul><p>习惯上，<strong>宏名用大写字母表示</strong>，以便于与变量区别。但也允许用小写字母。</p><p>举例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZERO</span> <span class="token expression"><span class="token number">0</span>   </span><span class="token comment">//#define的标识符常量</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zero = %d\n"</span><span class="token punctuation">,</span> ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>跟#include一样，“#”开头的语句都是“预处理语句”，在编译之前，预处理器会查找程序中所有的“ZERO”，并把它替换成0，这个过程称为预编译处理。</p><p>然后将预处理的结果和源程序一起再进行通常的编译处理，以得到目标代码 (OBJ文件)。</p></blockquote><p>举例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token operator">=</span> <span class="token number">3.14</span>  </span><span class="token comment">// 定义常量 PI，常量值 3.14。因为宏定义不是 C 语句，后面不能有分号</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//PI = 3.1415  可以吗? =&gt; 不可以</span>  <span class="token keyword">double</span> area<span class="token punctuation">;</span>  <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>  area <span class="token operator">=</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"面积 : %.2f"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//函数结果状态代码</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OVERFLOW</span> <span class="token expression"><span class="token operator">-</span><span class="token number">2</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>#define 对于考研数据结构来说没有什么贡献，我们只要认得它就行。</p><p>例如1，<code>#define MAX_Size 50</code>这句，即定义了常量<code>MAX_Size</code>(此时x = 50;等价于x = MAX_Size;)。</p><p>例如2，你要定义一个数组，如<code>int A[MAX_Size];</code>，加上一句注释“<code>/*MAX_Size为已经定义的常量，其值为50*/</code>”即可。</p></blockquote><h5 id="6-2-2-使用const限定符"><a href="#6-2-2-使用const限定符" class="headerlink" title="6.2.2 使用const限定符"></a>6.2.2 使用const限定符</h5><p>C99中新的声明方式，这种方式跟定义一个变量是一样的，只需要在变量的数据类型前再加上一个const关键字，这被称为“限定符”。</p><p>格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> 数据类型 常量名 <span class="token operator">=</span> 常量值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//const 修饰的常变量</span><span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span><span class="token comment">//PI = 5.14;//是不能直接修改的！</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>const修饰的对象一旦创建就不能改变，所以必须初始化。</p><p>跟使用 #define定义宏常量相比，const定义的常量有详细的数据类型，而且会在编译阶段进行安全检查，在运行时才完成替换，所以会更加安全和方便。</p><h5 id="6-3-3-定义枚举常量"><a href="#6-3-3-定义枚举常量" class="headerlink" title="6.3.3 定义枚举常量"></a>6.3.3 定义枚举常量</h5><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">//使用enum定义枚举类</span><span class="token keyword">enum</span> <span class="token class-name">Sex</span><span class="token punctuation">{</span>    <span class="token comment">//括号中的MALE,FEMALE,SECRET是枚举常量</span>MALE<span class="token punctuation">,</span>FEMALE<span class="token punctuation">,</span>SECRET<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举常量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> MALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> FEMALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注：枚举常量默认是从0开始，依次向下递增1的</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【北京航空航天大学2018研】若已知有如下宏定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">CANBERRA</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>x－y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x＋y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则以下表达式中，返回结果值最大的是（　　）。<br>A．CANBERRA（3.0，2.0）；<br>B．CANBERRA（4.0，1.0）；<br>C．CANBERRA（1.0＋2.0，0.0＋2.0）；<br>D．CANBERRA（1.0＋2.0，1.0＋1.0）；</p><p>【答案】C</p><p>【解析】A项中为1.0/5.0，结果为0.2；B项中为3.0/5.0，结果为0.6；C项中的宏替换后为（1.0＋2.0－0.0＋2.0）/（1.0＋2.0＋0＋2.0）＝1.0；D项中宏替换后为（1.0＋2.0－1.0＋1.0）/（1.0＋2.0＋1.0＋1.0）＝0.6，因此最后答案为C。</p></blockquote><blockquote><p>【中央财经大学2018研】若有如下宏定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">N</span>  <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">y</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>N＋<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>则执行下列语句：z＝4*(N＋y(5))；后的结果是（　　）。<br>A．语句有错误<br>B．z值为68<br>C．z值为60<br>D．z值为180</p><p>【答案】B</p><p>【解析】y(5)＝15，z＝4*(N＋y(5))＝4*17＝68，答案选B。</p></blockquote><h3 id="7、输入-x2F-输出函数"><a href="#7、输入-x2F-输出函数" class="headerlink" title="7、输入/输出函数"></a>7、输入/输出函数</h3><p>所谓输入输出是以计算机主机为主体而言的。</p><ul><li>输出：从计算机向外部输出设备(显示器、打印机)输出数据。</li><li>输入：从输入设备(键盘、鼠标、扫描仪)向计算机输入数据。</li></ul><p><img src="/../../images/04/image-20230824232336985.png"></p><p>c语言本身没有提供专门的输入输出语句，所有的输入输出都是由调用标准库函数中的输入输出函数来实现的。</p><p><strong>输入函数：scanf() 、 getchar()、gets()：</strong> </p><ul><li>scanf()，是格式输入函数，可接收<code>任意类型</code>的数据。 </li><li>getchar()，是<code>字符</code>输入函数， 只能接收<code>单个字符</code>。</li><li>gets()，是<code>字符串</code>输入函数。</li></ul><p><strong>输出函数：printf() 、 putchar()、puts()：</strong></p><ul><li>printf()，是格式输出函数，可按指定的格式显示任意类型的数据。</li><li>putchar()，<code>字符</code>显示函数，只能显示<code>单个字符</code>。</li><li>puts()，是<code>字符串</code>输出函数。</li></ul><h4 id="7-1-scanf-的使用"><a href="#7-1-scanf-的使用" class="headerlink" title="7.1 scanf()的使用"></a>7.1 scanf()的使用</h4><p>scanf()函数的作用：把从键盘上输入的数据根据找到的地址存入内存中，即给变量赋值。</p><p>格式： <code>scanf("格式控制字符串",参数地址列表); </code></p><ul><li>“格式控制字符串”：约定输入数据的类型和格式，参数的个数必须与变量地址的个数一致。</li><li>“参数地址列表”：以逗号 “, ”分隔的、<code>输入数据变量地址</code>序列。</li></ul><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，&amp;a,&amp;b,&amp;c中的<code>&amp;</code>是寻址操作符，&amp;a表示对象a在内存中的地址。</p><p>注意，</p><ul><li>如果scanf中%d是连着写的，如“<code>%d%d%d</code>”，在输入数据时，数据之间不可以用逗号分隔，只能用空白字符（空格或tab键或者回车键）分隔。即“<code>2(空格)3(tab)4</code>” 或 “<code>2(tab)3(回车)4</code>”等。</li><li>如果是“<code>%d,%d,%d</code>”，则在输入数据时需要加“,”，如“<code>2,3,4</code>”。</li></ul><p>举例1：计算圆的面积，其半径由用户指定</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> radius<span class="token punctuation">,</span> area<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入半径值：  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//输入半径</span>    area <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"area=%f\n"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出圆的面积</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：变量名之前要加上&amp;运算符，表示取变量的地址，如“&amp;a，&amp;b”。否则将会出现错误。</p></blockquote><p>举例2：输入一个整数，求其绝对值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> absNum <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>absNum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        absNum <span class="token operator">=</span> <span class="token operator">-</span>absNum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n 整数:%d---&gt;绝对值为:%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> absNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例3：输入多个变量的值，求乘积</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入整数a,b:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【武汉科技大学2019研】若有声明语句：int x； char y[20]； double z；则正确的输入语句是（　）。<br>A．scanf（”%d%c%le\n”，&amp;x，&amp;y，&amp;z）；<br>B．scanf（”%2d%s%lf”，&amp;x，&amp;y，&amp;z）；<br>C．scanf（”%d%s%lf”，&amp;x，y，&amp;z）；<br>D．scanf（”%x%s%3.2f”，&amp;x，y，&amp;z）；</p><p>【答案】C</p><p>【解析】y为一维数组名，指向数组首元素的地址，因此不需要再使用取地址运算符&amp;，AB错误；D中%3.2f表示长度为3，小数为2位，但是小数点也占一位，因此D错误，答案选C。</p></blockquote><h4 id="7-2-getchar-与putchar-的使用"><a href="#7-2-getchar-与putchar-的使用" class="headerlink" title="7.2 getchar()与putchar()的使用"></a>7.2 getchar()与putchar()的使用</h4><ul><li><p>getchar()：输入字符数据</p><ul><li>格式：getchar()</li><li>功能：从键盘缓冲区读入一个字符</li></ul></li><li><p>putchar()：输出字符</p><ul><li>格式： putchar(ch)，其中ch是一个字符变量</li><li>功能：从标准输出设备输出一个字符</li></ul></li></ul><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出单个字符A</span><span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出变量c的ASCII对应字符</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行换行效果，屏幕不显示</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-gets-与puts-的使用-超纲"><a href="#7-3-gets-与puts-的使用-超纲" class="headerlink" title="7.3 gets()与puts()的使用(超纲)"></a>7.3 gets()与puts()的使用(超纲)</h4><p><strong>puts()：</strong></p><p>在C语言中，puts() 是一个用于输出字符串的标准库函数，其原型定义在 <code>&lt;stdio.h&gt;</code> 头文件中。<code>puts()</code> 函数的作用是将一个以 null 字符（<code>\0</code>）结尾的字符串打印到标准输出（通常是控制台）上，并自动添加一个换行符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"China\nBeijing"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，puts()函数只能用于输出字符串，而不能输出其他类型的数据。如果需要输出其他类型的数据，应使用 <code>printf()</code> 函数。</p><p><strong>gets()：</strong></p><p>读取标准输入设备输入的字符串，直到遇到【Enter】键才结束。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//定义一个数组</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取输入的字符串,存放到字符数组中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例：字符串的读写</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输入字符串至数组变量str</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your name is "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出字符串</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、变量按声明位置的分类-后面讲"><a href="#8、变量按声明位置的分类-后面讲" class="headerlink" title="8、变量按声明位置的分类(后面讲)"></a>8、变量按声明位置的分类(后面讲)</h3><p>变量按照声明的位置，可以分为：局部变量 和 全局变量。</p><ul><li><p><strong>局部变量</strong></p><ul><li>在<code>函数体内定义</code>的变量，也称内部变量。局部变量只能在定义它的函数中使用。</li></ul></li><li><p><strong>全局变量</strong></p><ul><li><p>在<code>函数之外</code>定义的变量称为外部变量，外部变量是<code>全局变量</code>（也称全程变量）。</p></li><li><p>一个程序中，凡是在全局变量之后定义的函数，都可以使用在其之前定义的全局变量。</p></li></ul></li></ul><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">2023</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> local <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>        <span class="token comment">//下面定义的global会不会报错？</span>    <span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">2024</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"global = %d\n"</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当局部变量和全局变量同名的时候，局部变量优先使用。</p></blockquote><h3 id="9、常见的进制"><a href="#9、常见的进制" class="headerlink" title="9、常见的进制"></a>9、常见的进制</h3><h4 id="9-1-二进制概述"><a href="#9-1-二进制概述" class="headerlink" title="9.1 二进制概述"></a>9.1 二进制概述</h4><p><strong>计算机底层如何存储数据呢？</strong></p><blockquote><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p></blockquote><p><img src="/../../images/04/010101.jpg"></p><blockquote><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p></blockquote><p><strong>二进制的由来</strong></p><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p><strong>二进制的应用</strong></p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><p><img src="/../../images/04/image-20220520105721126.png"></p><p>我们偶尔会看到的：SOS，即为：</p><p><img src="/../../images/04/image-20220520110206899.png" alt="image-20220520110206899"></p><h4 id="9-2-进制的分类"><a href="#9-2-进制的分类" class="headerlink" title="9.2 进制的分类"></a>9.2 进制的分类</h4><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li><li>C 语言的整数默认都是十进制数</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span>b101010<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">012</span><span class="token punctuation">;</span> <span class="token comment">// 八进制，相当于十进制的10</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">017</span><span class="token punctuation">;</span> <span class="token comment">// 八进制，相当于十进制的15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x1A2B</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制，相当于十进制的6699</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0X10</span><span class="token punctuation">;</span>   <span class="token comment">// 十六进制，相当于十进制的16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="9-3-进制的换算举例"><a href="#9-3-进制的换算举例" class="headerlink" title="9.3 进制的换算举例"></a>9.3 进制的换算举例</h4><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h4 id="9-4-输出格式"><a href="#9-4-输出格式" class="headerlink" title="9.4 输出格式"></a>9.4 输出格式</h4><p>不同的进制只是整数的书写方法不同，不会对整数的实际存储方式产生影响。不同进制可以混合使用，比如 10 + 015 + 0x20 是一个合法的表达式。</p><p>printf() 的进制相关占位符如下：</p><ul><li><p>%d ：十进制整数。</p></li><li><p>%o ：八进制整数。</p></li><li><p>%x ：十六进制整数。</p></li><li><p>%#o ：显示前缀 0 的八进制整数。</p></li><li><p>%#x ：显示前缀 0x 的十六进制整数。</p></li><li><p>%#X ：显示前缀 0X 的十六进制整数。</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dec = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"octal = %o\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 144</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hex = %x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 64</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"octal = %#o\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0144</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hex = %#x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x64</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hex = %#X\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0X64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-5-进制间的转换-了解"><a href="#9-5-进制间的转换-了解" class="headerlink" title="9.5 进制间的转换(了解)"></a>9.5 进制间的转换(了解)</h4><h5 id="9-5-1-二进制如何表示整数？"><a href="#9-5-1-二进制如何表示整数？" class="headerlink" title="9.5.1 二进制如何表示整数？"></a>9.5.1 二进制如何表示整数？</h5><ul><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。</p><ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li><li><p>规定1：正数的补码与反码、原码一样，称为<code>三码合一</code></p></li><li><p>规定2：负数的补码与反码、原码不一样：</p><ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul><h5 id="9-5-2-二进制与十进制间的转换"><a href="#9-5-2-二进制与十进制间的转换" class="headerlink" title="9.5.2 二进制与十进制间的转换"></a>9.5.2 二进制与十进制间的转换</h5><p><img src="/../../images/04/1689209516368.png" alt="1689209516368"></p><p><strong>二进制转十进制：权相加法</strong></p><p>针对于一个字节的数据举例来说：</p><p><img src="/../../images/04/1689212021511.png" alt="1689212021511"></p><ul><li><p>例如：1个字节（8位）</p><p>25 ==&gt; 原码  0001 1001 ==&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 ==&gt;原码  1001 1001 ==&gt; 反码1110 0110 ==&gt;补码 1110 0111</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">整数：正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（反码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（补码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">10000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100110</span>（反码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100111</span>（补码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个字节可以存储的整数范围是多少？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1个字节：8位</span><span class="token number">0000</span> <span class="token number">0001</span>  <span class="token operator">~</span>  <span class="token number">0111</span> <span class="token number">111</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token operator">~</span><span class="token number">127</span><span class="token number">1000</span> <span class="token number">0001</span> <span class="token operator">~</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">127</span> <span class="token operator">~</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token number">1000</span> <span class="token number">0000</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">128</span>（特殊规定）<span class="token operator">=</span><span class="token operator">-</span><span class="token number">127</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>十进制转二进制</strong></p><p>十进制转二进制：<code>除2取余的逆</code></p><p><img src="/../../images/04/1689214597038.png" alt="1689214597038"></p><h5 id="9-5-3-二进制与八进制、十六进制间的转换"><a href="#9-5-3-二进制与八进制、十六进制间的转换" class="headerlink" title="9.5.3 二进制与八进制、十六进制间的转换"></a>9.5.3 二进制与八进制、十六进制间的转换</h5><p><strong>二进制转八进制</strong></p><p><img src="/../../images/04/image-20230808151057231.png" alt="image-20230808151057231"></p><p><strong>二进制转十六进制</strong></p><p><img src="/../../images/04/image-20230808151152468.png" alt="image-20230808151152468"></p><p><strong>八进制、十六进制转二进制</strong></p><p><img src="/../../images/04/1689216401546.png" alt="1689216401546"></p><p><img src="/../../images/04/1689216597551.png" alt="1689216597551"></p><blockquote><p>练习：以下叙述中错误的是（　　）。<br>A．C程序在运行过程中所有计算都以十进制方式进行<br>B．C程序在运行过程中所有计算都以二进制方式进行<br>C．所有C程序都需要编译链接无误后才能运行<br>D．C程序中字符变量存放的是字符的ASCII值</p><p>【答案】A</p><p>【解析】C程序在运行过程中所有计算都以二进制方式进行。答案选择A选项。</p></blockquote><blockquote><p> 【华南理工大学2018研】与十进制1100等值的十六进制数是（　　）。<br> A．44A<br> B．44C<br> C．54A<br> D．54C</p><p> 【答案】B</p><p> 【解析】1100转换成二进制为0100 0100 1100，因此转换为十六进制为44C。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第01章：C语言入门</title>
      <link href="/2024/04/20/04-c-yu-yan/di-01-zhang-c-yu-yan-ru-men/"/>
      <url>/2024/04/20/04-c-yu-yan/di-01-zhang-c-yu-yan-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="第01章-C语言入门"><a href="#第01章-C语言入门" class="headerlink" title="第01章_C语言入门"></a>第01章_C语言入门</h2><hr><h3 id="0、本章脉络章节"><a href="#0、本章脉络章节" class="headerlink" title="0、本章脉络章节"></a>0、本章脉络章节</h3><p><img src="/../../images/04/%E7%AC%AC1%E7%AB%A0_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8.png" alt="专题脉络"></p><h3 id="1、初识计算机语言"><a href="#1、初识计算机语言" class="headerlink" title="1、初识计算机语言"></a>1、初识计算机语言</h3><h4 id="1-1-计算机语言是什么"><a href="#1-1-计算机语言是什么" class="headerlink" title="1.1 计算机语言是什么"></a>1.1 计算机语言是什么</h4><ul><li><p><strong>人类语言</strong>：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，可以使用普通话或英语。</p></li><li><p><strong>计算机编程语言</strong>，就是人与计算机交流的方式。人们可以使用<code>编程语言</code>对计算机下达<code>命令</code>，让计算机完成人们需要的功能。</p><ul><li>计算机语言有很多种。如：C 、C++、Java、Go、JavaScript、Python，Scala等。</li></ul></li></ul><blockquote><p>体会：语言 = 语法 + 逻辑</p></blockquote><h4 id="1-2-计算机语言简史"><a href="#1-2-计算机语言简史" class="headerlink" title="1.2 计算机语言简史"></a>1.2 计算机语言简史</h4><ul><li><p><strong>第一代：机器语言（相当于人类的石器时代）</strong></p><ul><li><p>1946年2月14日，世界上第一台计算机<code>ENAC</code>诞生，使用的是最原始的<code>穿孔卡片</code>。这种卡片上使用的是用<code>二进制代码</code>表示的语言，与人类语言差别极大，这种语言就称为<code>机器语言</code>。比如一段典型的机器码：</p><pre class="line-numbers language-none"><code class="language-none">1.0000,0000,000000010000 代表 LOAD A, 162.0000,0001,000000000001 代表 LOAD B, 13.0001,0001,000000010000 代表 STORE B, 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>这种语言本质上是计算机能识别的<code>唯一语言</code>，人类很难理解。可以大胆想象”<code>此时的程序员99.9%都是异类！</code>“</p><p><img src="/../../images/04/image-20220309223406537.png" alt="image-20220309223406537"></p></li></ul></li><li><p><strong>第二代：汇编语言（相当于人类的青铜&amp;铁器时代）</strong></p><ul><li><p>使用英文缩写的<code>助记符</code>来表示基本的操作，这些助记符构成了汇编语言的基础。比如：<code>LOAD</code>、<code>MOVE</code>等，使人更容易使用。因此，汇编语言也称为<code>符号语言</code>。</p></li><li><p>优点：能编写<code>高效率</code>的程序。</p></li><li><p>缺点：汇编语言是<code>面向机器的</code>，不同计算机会有不同的汇编语言，程序不易移植。</p><p><img src="/../../images/04/1689152350231.png" alt="1689152350231"></p></li><li><p>目前仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p></li></ul></li><li><p><strong>第三代：高级语言（相当于人类的信息时代）</strong></p><ul><li><p>高级语言，是一种<code>接近于人们使用习惯</code>的程序设计语言。它允许程序员使用<code>接近日常英语</code>的指令来编写程序，程序中的符号和算式也与<code>日常用的数学式子</code>差不多，接近于自然语言和数学语言，容易为人们掌握。比如：</p><p><img src="/../../images/04/1689152910950.png" alt="1689152910950"></p></li><li><p>高级语言<code>独立于计算机硬件</code>，有一定的通用性；计算机不能直接识别和执行用高级语言编写的程序，需要使用<strong>编译器或者解释器</strong>，<code>转换为机器语言</code>才能被识别和执行。</p><p><img src="/../../images/04/1689153225780.png" alt="1689153225780"></p></li><li><p>使用普遍的高级语言有Fortran、ALGOL、Basic、COBOL、LISP、Pascal、PROLOG、C、C++、VC、VB、Delphi、Java等。</p></li></ul></li></ul><h3 id="2、初识C语言"><a href="#2、初识C语言" class="headerlink" title="2、初识C语言"></a>2、初识C语言</h3><h4 id="2-1-C语言的由来"><a href="#2-1-C语言的由来" class="headerlink" title="2.1 C语言的由来"></a>2.1 C语言的由来</h4><p><strong>C 语言最初是作为 Unix 系统的开发工具而发明的。</strong></p><p>1969年，美国贝尔实验室的肯·汤普森（Ken Thompson）与丹尼斯·里奇（Dennis Ritchie）一起开发了Unix 操作系统。Unix 是用<code>汇编语言</code>写的，依赖于计算机硬件。为了程序的<code>可读性</code>和<code>可移植性</code>，他们决定使用高级语言重写。但是，当时的高级语言无法满足他们的要求，汤普森就在 BCPL 语言的基础上发明了 <code>B 语言</code>。</p><p>1972年，丹尼斯·里奇（Dennis Ritchie）在 B 语言的基础上重新设计了一种新语言，这种新语言取代了 B 语言，称为<code> C 语言</code>。</p><p>1973年，<code>整个 Unix 系统都使用 C 语言重写</code>。</p><p><img src="/../../images/04/image-20230821142911092.png" alt="image-20230821142911092"></p><p>此后，这种语言快速流传，广泛用于各种操作系统和系统软件的开发。如UNIX、MS-DOS、Microsoft Windows及Linux等。</p><p><img src="/../../images/04/image-20230808143350533.png" alt="image-20230808143350533"></p><p>1988年，美国国家标准协会（ANSI）正式将<code> C语言标准化</code>，标志着 C 语言开始稳定和规范化。</p><h4 id="2-2-为什么要学习C语言"><a href="#2-2-为什么要学习C语言" class="headerlink" title="2.2 为什么要学习C语言"></a>2.2 为什么要学习C语言</h4><p>1、<strong>C语言具有可移植性好、跨平台的特点</strong>，用C编写的代码可以在不同的操作系统和硬件平台上编译和运行。</p><ul><li>C 语言的原始设计目的，是将 Unix 系统移植到其他计算机架构，这使得它从一开始就非常注重可移植性。</li></ul><p>2、<strong>C语言在许多领域应用广泛。</strong>掌握C语言可以让你有更多就业机会。</p><ul><li><code>操作系统</code>：C 广泛用于开发操作系统，如 Unix、Linux 和 Windows。</li><li><code>嵌入式系统</code>：C 是一种用于开发嵌入式系统（如微控制器、微处理器和其他电子设备）的流行语言。</li><li><code>系统软件</code>：C用于开发设备驱动程序、编译器和汇编器等系统软件。</li><li><code>网络</code>：C 语言广泛用于开发网络应用程序，例如 Web 服务器、网络协议和网络驱动程序。</li><li><code>数据库系统</code>：C 用于开发数据库系统，例如 Oracle、MySQL 和 PostgreSQL。</li><li><code>游戏</code>：由于 C 能够处理低级硬件交互，因此经常用于开发计算机游戏。</li><li><code>人工智能</code>：C 用于开发人工智能和机器学习应用程序，例如神经网络和深度学习算法。</li><li><code>科学应用</code>：C 用于开发科学应用程序，例如仿真软件和数值分析工具。</li><li><code>金融应用</code>：C用于开发股票市场分析和交易系统等金融应用。</li></ul><p>3、C 语言能够直接对硬件进行操作、管理内存、跟操作系统对话，这使得它是一种非常接近底层的语言，非常适合写需要<strong>跟硬件交互、有极高性能要求的程序</strong>。</p><p>4、<strong>学习C语言有助于快速上手其他编程语言</strong>，比如C++（原先是C语言的一个扩展，在C语言的基础上嫁接了面向对象编程）、C#、Java、PHP、Javascript、Perl等。这些语言都继承或深受C语言的影响和启发。</p><p>5、C 语言长盛不衰。至今，<strong>依然是最广泛使用、最流行的编程语言之一</strong>。包括很多大学将C语言作为计算机教学的入门语言，拥有庞大而活跃的用户社区，这意味着有许多资源和库可供开发人员使用。</p><h4 id="2-3-计算机语言排行榜"><a href="#2-3-计算机语言排行榜" class="headerlink" title="2.3 计算机语言排行榜"></a>2.3 计算机语言排行榜</h4><p>TIOBE （<a href="https://www.tiobe.com/tiobe-index/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%81%E8%A1%8C%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8E%92%E8%A1%8C%EF%BC%8C%E6%AF%8F%E6%9C%88%E6%9B%B4%E6%96%B0%E3%80%82%E6%8E%92%E5%90%8D%E6%9D%83%E9%87%8D%E5%9F%BA%E4%BA%8E%E4%B8%96%E7%95%8C%E8%8C%83%E5%9B%B4%E5%86%85">https://www.tiobe.com/tiobe-index/）是一个流行编程语言排行，每月更新。排名权重基于世界范围内</a> 工程师数量，Google、Bing、Yahoo! 、Wikipedia、Amazon、Youtube和百度这些主流的搜索引擎，也将作为排名权重的参考指标。</p><p><img src="/../../images/04/image-20230821142412443.png" alt="image-20230821142412443"></p><p>计算机走势图：</p><p><img src="/../../images/04/image-20230821142441945.png" alt="image-20230821142441945"></p><h4 id="2-4-网友一言话C"><a href="#2-4-网友一言话C" class="headerlink" title="2.4 网友一言话C"></a>2.4 网友一言话C</h4><p><a href="https://www.nowcoder.com/stack/209">https://www.nowcoder.com/stack/209</a></p><p><img src="/../../images/04/image-20230819162927908.png" alt="image-20230819162927908"></p><h4 id="2-5-C语言的版本选择"><a href="#2-5-C语言的版本选择" class="headerlink" title="2.5 C语言的版本选择"></a>2.5 C语言的版本选择</h4><p>随着微型计算机的日益普及，出现了许多C语言版本。</p><p><strong>版本1：K＆R C</strong></p><p>K&amp;R C 指的是 C 语言的原始版本。1978年，C 语言的发明者布莱恩·柯林（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）合写了一本著名的教材《C 编程语言》（The C programming language）。</p><p>由于 C 语言还没有成文的语法标准，这本书就成了公认标准，以两位作者的姓氏首字母作为版本简称“K&amp;R C”。</p><p><strong>版本2：ANSI C（又称 C89 或 C90）</strong></p><p>C 语言的原始版本非常简单，对很多情况的描述非常模糊，加上 C 语法依然在快速发展，要求将 C 语言标准化的呼声越来越高。</p><p>1989年，美国国家标准协会（ANSI）制定了一套 C 语言标准，并于次年被国际标准化组织（ISO）通过。它被称为“ANSI C”，也可以按照发布年份，称为“C89 或 C90”。</p><p><strong>版本3：C99</strong></p><p>C 语言标准的第一次<code>大型修订</code>，发生在1999年，增加了许多语言特性，比如双斜杠（ // ）的注释语法，可变长度数组、灵活的数组成员、复数、内联函数和指定的初始值设定项。这个版本称为 C99，<code>是目前最流行的 C 版本</code>。</p><p><strong>版本4：C11</strong></p><p>2011年，标准化组织再一次对C 语言进行修订，增加了_Generic、static_assert 和原子类型限定符。这个版本称为C11。</p><blockquote><p>需要强调的是，修订标准的原因不是因为原标准不能用，而是需要跟进新的技术。</p></blockquote><p><strong>版本5：C17</strong></p><p>C11 标准在2017年进行了修补，但发布是在2018年。新版本只是解决了 C11 的一些缺陷，没有引入任何新功能。这个版本称为 C17。</p><p><strong>版本6：C23</strong></p><p>2023年预计发布，计划进一步增强安全性，消除实现定义的行为，引入模块化语言概念等新特性，使C语言在安全和可靠性方面有重大提高。</p><h3 id="3、第一个C程序的编写-gt-编译-gt-运行"><a href="#3、第一个C程序的编写-gt-编译-gt-运行" class="headerlink" title="3、第一个C程序的编写->编译->运行"></a>3、第一个C程序的编写-&gt;编译-&gt;运行</h3><h4 id="3-1-步骤1：HelloWorld的编写"><a href="#3-1-步骤1：HelloWorld的编写" class="headerlink" title="3.1 步骤1：HelloWorld的编写"></a>3.1 步骤1：HelloWorld的编写</h4><p>C 语言的源代码文件，以<strong>后缀名 .c 结尾</strong>。下面是一个简单的 C 程序 <code>Hello.c</code> 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>              </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello,world!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-步骤2：编译器的安装与配置"><a href="#3-2-步骤2：编译器的安装与配置" class="headerlink" title="3.2 步骤2：编译器的安装与配置"></a>3.2 步骤2：编译器的安装与配置</h4><p>C 语言是一种<code>编译型语言</code>，源码都是<code>文本文件</code>，本身无法执行。必须通过编译器，生成二进制的可执行文件，才能执行。</p><p>目前，最常见的 C 语言编译器是自由软件基金会推出的 <code>GCC 编译器</code>，可以免费使用。Linux 和 Mac 系统可以直接安装 GCC，Windows 系统可以安装 <code>MinGW</code>。</p><blockquote><p>补充知识：MinGW和GCC的区别：</p><p>GCC是一个跨平台的编译器集合，可用于多种操作系统和处理器架构，包括Windows；而MinGW是GCC在Windows平台上的移植版本，主要用于在Windows上本地编译C和C++代码。</p></blockquote><p>在Windows下，MinGW的详细安装和配置见<code>《第01章附录：MinGW编译器的安装和配置.md》</code>。</p><h4 id="3-3-步骤3：编译和运行"><a href="#3-3-步骤3：编译和运行" class="headerlink" title="3.3 步骤3：编译和运行"></a>3.3 步骤3：编译和运行</h4><p>编译器将代码从文本翻译成二进制指令的过程，就称为编译阶段，又称为“编译时”（compile time），跟运行阶段（又称为“运行时”）相区分。</p><p>假设你已经安装好了 GCC 编译器，可以通过<code>win+r</code>打开cmd命令行，在Hello.c文件所在目录下执行下面的命令。</p><pre class="line-numbers language-none"><code class="language-none">&gt; gcc Hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20230821203629981.png" alt="image-20230821203629981"></p><p>上面命令使用 gcc 编译器，将源文件 Hello.c 编译成二进制代码。</p><p>运行这个命令以后，默认会在当前目录下生成一个编译产物文件 a.exe。执行该文件，就会在屏幕上输出 Hello World 。</p><pre class="line-numbers language-none"><code class="language-none">&gt; a.exehello,world!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../images/04/image-20230821203807040.png" alt="image-20230821203807040"></p><p><strong>GCC 的 -o 参数（output 的缩写）可以指定编译产物的文件名。</strong></p><pre class="line-numbers language-none"><code class="language-none">&gt; gcc -o Hello Hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20230821204057346.png"></p><p>上面命令的 <code>-o Hello</code> 指定，编译得到的可执行文件名为 Hello.exe ，取代默认的 a.exe。执行该文件，也会得到同样的结果。</p><pre class="line-numbers language-none"><code class="language-none">&gt; Hello.exehello,world!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../images/04/image-20230821204306119.png" alt="image-20230821204306119"></p><p><strong>GCC 的 <code>-std= 参数</code>（standard 的缩写）还可以指定按照哪个 C 语言的标准进行编译。</strong></p><pre class="line-numbers language-none"><code class="language-none">&gt; gcc -std=c99 Hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令指定按照 C99 标准进行编译。</p><h3 id="4、IDE的使用"><a href="#4、IDE的使用" class="headerlink" title="4、IDE的使用"></a>4、IDE的使用</h3><p>IDE(Integrated Development Environment，集成开发环境)：相较于文本开发工具，IDE可以把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p><h4 id="4-1-开发工具介绍"><a href="#4-1-开发工具介绍" class="headerlink" title="4.1 开发工具介绍"></a>4.1 开发工具介绍</h4><h5 id="方式1：本地安装的IDE工具"><a href="#方式1：本地安装的IDE工具" class="headerlink" title="方式1：本地安装的IDE工具"></a>方式1：本地安装的IDE工具</h5><p><strong>1. Code::Block</strong></p><p>Code::Block是一个免费的跨平台IDE，它支持C、C++和Fortan程序的开发。Code::Block的最大特点是它支持通过插件的方式对IDE自身功能进行扩展，这使得Code::Block具有很强的灵活性，方便用户使用。</p><p>官网地址：<a href="https://www.codeblocks.org/">https://www.codeblocks.org</a></p><p><strong>2. Microsoft Visual C++ 2010</strong></p><p>Visual C++ 2010，简称VC2010，是由微软开发的独立的、免费的 C/C++ 编译工具，与Visual Basic等并列，最后微软将它们整合在一起组成了Visual Studio。</p><p>Visual C++从发布起到现在已经有10个大版本了，这里介绍的Visual C++ 2010就是Visual C++ 10，简称VC10。上朔10多年发布的Visual C++ 6.0，被称为史上最经典的VC，现在有很多企业还在用它，大量的教材基于这个版本的VC来写的。但VC6比较弱，被淘汰是迟早的。</p><p><strong>3. Microsoft Visual Studio</strong></p><p>Visual Studio（简称 VS）是由微软公司发布的集成开发环境。它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境（IDE）等。</p><p>Visual Studio 支持 C/C++、C#、F#、VB 等多种程序语言的开发和测试，可以用于生成Web应用程序，也可以生成桌面应用程序，功能十分强大。但下载和安装很可能耗时数小时，还可能会塞满磁盘。</p><p>Visual Studio 2019有三种版本：社区版(免费，不支持企业使用)，专业版(第一年1199美元/ 799美元续订)和企业版(第一年5999美元/2569美元续订)。企业版拥有面向架构师的功能、高级调试和测试，这些功能是另两种SKU所没有的。</p><p>Visual Studio旨在成为世界上最好的IDE（集成开发环境），目前最新版本为 Visual Studio 2023。</p><blockquote><p>这就好像Office 2007是由Word 2007、Excel 2007、Access 2007等等组成的一个道理。其中Visual C++就是Visual Studio的一个重要的组成部分。</p></blockquote><p>官网地址：<a href="https://visualstudio.microsoft.com/">https://visualstudio.microsoft.com</a></p><p><strong>4. CLion</strong></p><p>CLion是一款由JetBrains推出的跨平台C/C++集成开发环境（IDE），它具有智能编辑器、CMake构建支持、调试器、单元测试、代码分析等功能,可以极大提高C/C++开发效率。</p><p>官网地址：<a href="https://www.jetbrains.com/clion">https://www.jetbrains.com/clion</a></p><h5 id="方式2：可在线使用的工具"><a href="#方式2：可在线使用的工具" class="headerlink" title="方式2：可在线使用的工具"></a>方式2：可在线使用的工具</h5><p>CodingGround: <a href="https://tutorialspoint.com/compile_c_online.php">https://tutorialspoint.com/compile_c_online.php</a></p><p><img src="/../../images/04/image-20230821153059391.png" alt="image-20230821153059391"></p><p>OnlineGDB: <a href="https://onlinegdb.com/online_c_compiler">https://onlinegdb.com/online_c_compiler</a></p><p><img src="/../../images/04/image-20230821153146970.png" alt="image-20230821153146970"></p><p>Lightly：<a href="https://cde2f3ce.lightly.teamcode.com/">https://cde2f3ce.lightly.teamcode.com/</a></p><p><img src="/../../images/04/image-20230821153237900.png" alt="image-20230821153237900"></p><h4 id="4-2-CLion的下载与安装"><a href="#4-2-CLion的下载与安装" class="headerlink" title="4.2 CLion的下载与安装"></a>4.2 CLion的下载与安装</h4><p>详细见<code>《第01章附录：C开发利器：CLion的使用.md》</code>。</p><h4 id="4-3-CLion中HelloWorld的执行"><a href="#4-3-CLion中HelloWorld的执行" class="headerlink" title="4.3 CLion中HelloWorld的执行"></a>4.3 CLion中HelloWorld的执行</h4><p>1）选择”New Project”：</p><p><img src="/../../images/04/1692686679397.png" alt="image-1692686679397"></p><p>2）指定创建C可执行文件、工程目录，图中的“untitled1”需要修改为自己的工程名称。如下所示：</p><p><img src="/../../images/04/1692687949240.png" alt="image-1692687949240"></p><p>3）选择C可执行文件，修改工程名称为demo1</p><p><img src="/../../images/04/1692687854607.png" alt="image-1692687854607"></p><p>4）点击“Create”进行下一步，如图所示</p><p><img src="/../../images/04/1692688033686.png" alt="1692688033686"></p><p>5）此处选择编译器，默认MinGW即可，点击“OK”按钮，如图所示，默认创建了main.c文件。</p><p><img src="/../../images/04/1692688090496.png" alt="1692688090496"></p><p>6）点击执行按钮，如下所示</p><p><img src="/../../images/04/1692688278731.png" alt="image-1692688278731"></p><h4 id="4-4-C-程序运行机制"><a href="#4-4-C-程序运行机制" class="headerlink" title="4.4 C 程序运行机制"></a>4.4 C 程序运行机制</h4><p><strong>过程1：编辑</strong></p><p>编写C语言源程序代码，并以文件的形式存储到磁盘中。源程序文件以“<code>.c</code>”作为扩展名。</p><p><strong>过程2：编译</strong></p><p>将C语言源程序转换为<code>目标程序(或目标文件)</code>。如果程序没有错误，没有任何提示，就会生成一个扩展名为“<code>.obj</code>”的二进制文件。C语言中的每条可执行语句经过编译后最终都将被转换成二进制的机器指令。</p><p><strong>过程3：链接/连接</strong></p><p>将编译形成的目标文件“.obj”和库函数及其他目录文件连接/链接，形成统一的<code>可执行的</code>二进制文件“<code>.exe</code>”。</p><blockquote><p>为什么需要链接库文件呢？</p><p>因为我们的C程序中会使用 C程序库的内容，比如&lt;stdio.h&gt; 、&lt;stdlib.h&gt; 中的函数printf()、system()等，这些函数不是程序员自己写的，而是C程序库中提供的，因此需要链接。链接后，生成的.exe 文件，比obj 文件大了很多。</p></blockquote><p><strong>过程4：运行</strong></p><p>有了可执行的exe文件，我们可以在控制台下直接运行此exe文件。</p><p><img src="/../../images/04/image-20230810153413126.png" alt="image-20230810153413126"></p><blockquote><p>注意：</p><p>对修改后的xxx.c源文件需要<strong>重新编译、链接</strong>，生成新的exe文件后，再执行，才能生效。</p></blockquote><p>练习：</p><blockquote><p>计算机高级语言程序的运行方法有编译执行和解释执行两种，以下叙述中正确的是（　　）。<br>A．C语言程序仅可以编译执行<br>B．C语言程序仅可以解释执行<br>C．C语言程序既可以编译执行，又可以解释执行<br>D．以上说法都不对</p><p>【答案】A</p><p>【解析】编译执行是指程序执行前需要一个专门的编译过程把程序编译成机器语言的文件，再次运行时不需要重新翻译，执行效率高；解释执行是指每个语句都是执行的时候才翻译，执行效率低。用C语言编写的程序必须经过编译器编译后，转换为二进制的机器指令来运行。</p></blockquote><p>练习：</p><blockquote><p>以下叙述中错误的是（　　）。<br>A．C语言的可执行程序是由一系列机器指令构成的<br>B．用C语言编写的源程序不能直接在计算机上运行<br>C．通过编译得到的二进制目标程序需要链接才可以运行<br>D．在没有安装C语言集成开发环境的机器上不能运行C源程序生成的exe文件</p><p>【答案】D</p><p>【解析】A项正确，C语言的可执行程序是由一系列机器指令组成的；BC项正确，用C语言编写的源程序必须经过编译，生成二进制目标代码，再经过连接才能运行；D项错误，C语言经过编译链接后的二进制目标代码可以脱离C语言集成开发环境独立运行。答案选择D选项。</p></blockquote><h3 id="5、注-释-comment"><a href="#5、注-释-comment" class="headerlink" title="5、注 释(comment)"></a>5、注 释(comment)</h3><p><img src="/../../images/04/image-20220610113151774.png"></p><ul><li><p>什么是注释？</p><ul><li>源文件中用于<code>解释</code>、<code>说明</code>程序的文字就是注释。</li><li>注释只是给人看的，程序执行时，<code>编译器会忽略注释</code>，注释对代码执行没有影响</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><ul><li><p>一件是自己写代码被要求加注释</p></li><li><p>另一件是接手别人代码，发现没有注释</p></li></ul></blockquote></li><li><p>不加注释的危害</p><p><img src="/../../images/04/%E6%96%B0%E6%9D%A5%E7%9A%84%E8%8F%9C%E9%B8%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E9%97%AF%E7%A5%B8%E4%BA%86%E3%80%82%E3%80%82%E3%80%82%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%A5%BD%E5%A4%9A%E5%B9%B4%E9%83%BD%E6%B2%A1%E4%BA%BA%E6%95%A2%E5%8A%A8%E8%BF%87%E7%9A%84.gif"></p></li><li><p>C语言中的注释类型：</p><ul><li><strong>单行注释</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>多行注释(或块注释)</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  这是第一行注释  这是第二行注释  这是第三行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 我是被注释的文字 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>举例</p><ul><li>举例1</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>              <span class="token comment">//这是编译预处理指令</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">//定义主函数</span><span class="token punctuation">{</span>                               <span class="token comment">//函数开始的标志</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出所指定的一行信息</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">//函数执行完毕时返回函数值0</span><span class="token punctuation">}</span>                               <span class="token comment">//函数结束的标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例2</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里定义了一个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>举例3</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* printf("2");printf("3");  */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例4</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token comment">/* file name */</span><span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：</p><ol><li><p>多行注释不能嵌套使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*我是注释信息1/*我是注释信息2*/</span>我是注释信息<span class="token number">3</span><span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双引号内使用注释，会被当做普通字符串看待，失去注释作用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"// hello /* atguigu */ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>一个段子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">A：嘿 <span class="token comment">//是什么意思啊？</span>B：嘿<span class="token punctuation">.</span>A：呃 我问你<span class="token comment">//是什么意思？</span>B：问吧<span class="token punctuation">.</span>A：我刚才不是问了么？B：啊？A：你再看看记录<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>B：看完了<span class="token punctuation">.</span>A：<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>所以<span class="token comment">//是啥？</span>B：所以什么？A：你存心耍我呢吧？B：没有啊 你想问什么？……不断循环之后，A一气之下和B绝交，自己苦学程序。N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……而他自己也不知道当年他问B的究竟是什么问题……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>练习：</p><blockquote><p>以下叙述中错误的是（　　）。<br>A．C语言中的每条可执行语句和非执行语句最终都将被转换成二进制的机器指令<br>B．C程序经过编译、链接步骤之后才能形成一个真正可执行的二进制机器指令文件<br>C．用C语言编写的程序称为源程序，它以ASCII代码形式存放在一个文本文件中<br>D．C语言源程序经编译后生成后缀为.obj的目标程序</p><p>【答案】A</p><p>【解析】A项错误，注释语句不会被翻译成二进制的机器指令。C源程序经过C编译程序编译之后生成后缀为.obj的二进制文件（称为目标文件），然后由“链接程序”（Link）的软件把.obj文件与各种库函数连接起来生成一个后缀为.exe的可执行文件。答案选择A选项。</p></blockquote><h3 id="6、HelloWorld的剖析"><a href="#6、HelloWorld的剖析" class="headerlink" title="6、HelloWorld的剖析"></a>6、HelloWorld的剖析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>              </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-规范的代码风格"><a href="#6-1-规范的代码风格" class="headerlink" title="6.1 规范的代码风格"></a>6.1 规范的代码风格</h4><p><strong>正确的缩进和空白</strong></p><ol><li><p>使用一次tab操作，实现缩进，默认整体向右边移动。相反，使用shift+tab整体向左移</p></li><li><p>运算符两边习惯性各加一个空格。比如：<code>2 + 4 * 5</code>。</p></li><li><p>可以使用代码格式化快捷键 ctrl+alt+L。(在CLion中使用)</p></li></ol><p><strong>代码块的风格</strong></p><p>1）行尾风格</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                          <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）次行风格</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                          <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确的注释和注释风格：</strong></p><p>1）如果注释一个函数，可以使用多行注释(或块注释)。</p><p>2）如果注释函数中的某一行语句，可以使用单行注释。</p><h4 id="6-2-代码细节剖析"><a href="#6-2-代码细节剖析" class="headerlink" title="6.2 代码细节剖析"></a>6.2 代码细节剖析</h4><h5 id="①-main"><a href="#①-main" class="headerlink" title="① main()"></a>① main()</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>每一个程序(或工程)可以定义很多函数(后面讲)，但有且只有一个main()函数，作为程序执行的入口，在 main()函数结尾结束整个程序的运行。</li><li>空括号()，表示 main 不接受任何参数。</li><li>写在main之前的“int”称为关键字，代表数据类型是整型。它是main()的返回值类型。即在执行main()函数后会得到一个整型值(即函数值)。</li><li>C 语言约定： <code>return 0</code>，表示main()函数终止运行，且运行成功；如果返回其它非零整数，就表示运行失败。默认情况下，如果 main() 里面省略 <code>return 0</code> 这一行，编译器会自动加上，但是为了保持统一的代码风格，不建议省略。</li></ul><h5 id="②-函数体"><a href="#②-函数体" class="headerlink" title="② 函数体"></a>② 函数体</h5><ul><li><p>一对花括号{}定义了函数的主体，所有函数都必须以大括号开头和结尾，成对出现。</p></li><li><p>C 程序中的函数体指的是作为该函数一部分的语句。它可以是任何操作，比如搜索、排序、打印等。</p></li><li><p>每一个执行语句后面都会有一个英文分号“;”作为语句结束的标志。</p></li><li><p>一行内可写几条语句，一条语句也可写在几行上。</p></li></ul><h5 id="③-printf"><a href="#③-printf" class="headerlink" title="③ printf()"></a>③ printf()</h5><p>printf()函数是产生格式化输出的函数，作用是将参数文本输出到屏幕。它名字里面的 f 代表 format (格式化)，表示可以指定输出文本的格式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将字符串输出到控制台，行尾不换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符 \n 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="④-标准库、头文件"><a href="#④-标准库、头文件" class="headerlink" title="④ 标准库、头文件"></a>④ 标准库、头文件</h5><p>printf() 是在标准库的头文件 <code>stdio.h</code> 中定义的。要想在程序中使用这个函数，必须在源文件头部引入这个头文件。即：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>何为标准库？</strong></p><p>程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能就可以了。C 语言自带的所有这些功能，统称为<code>“标准库”(standard library)</code>，包含C 内置函数、常量和头文件。</p><p>因为它们是写入标准的，到底包括哪些功能，应该怎么使用，都是规定好的，我们直接调用即可。</p><p><strong>何为头文件？</strong></p><p>不同的功能定义在不同的文件里，这些文件统称为<code>“头文件”(header file)</code>。如果系统自带某一个功能，就一定会自带描述这个功能的头文件，比如 printf() 的头文件就是系统自带的 <code>stdio.h</code> 。头文件的后缀通常是 <code>.h</code> 。</p><p><strong>预处理命令：#include命令</strong></p><p>如果要使用某个功能，就必须先加载其对应的头文件，加载使用的是 <code>#include</code> 命令，声明在各文件模块的开头。C语言中以 # 号开头的命令称为<code>预处理命令</code>。顾名思义，在编译器对当前C程序进行编译前执行预处理操作。</p><p>格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;头文件名&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>   </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意，加载头文件的 #include 语句不需要分号结尾</p></blockquote><p>对比写法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token expression">： </span><span class="token comment">//编译系统在系统头文件所在目录搜索</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span><span class="token expression">： </span><span class="token comment">//编译系统首先在当前的源文件目录中查找 stdio.h，找不到的话，再转向系统头文件所在目录搜索。</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>stdio.h</code>是系统提供的一个文件名，<code>stdio</code>是standard input &amp; output的缩写。</p><p>结论：</p><ul><li>引用系统头文件，两种形式都会可以，<code>#include &lt;&gt; </code>效率高。</li></ul><ul><li>引用用户头文件，只能使用 <code>#include ""</code>。</li></ul><p><strong>常用的C头文件</strong></p><ul><li><code>stdio.h</code>——定义核心输入和输出函数<ul><li>printf()、scanf()、getchar()、putchar()</li></ul></li><li><code>stdlib.h</code>——定义数值转换函数、伪随机网络生成器和内存分配</li><li><code>string.h</code>——定义字符串处理函数</li><li><code>stdint.h</code>——定义精确宽度的整数类型</li><li><code>math.h</code>——定义常用的数学函数<ul><li>sin()、sqrt()</li></ul></li><li><code>stddef.h</code>——定义了几个有用的类型和宏</li></ul><p>练习：</p><blockquote><p>以下叙述中正确的是（　）。<br>A．C程序中的注释只能出现在程序的开始位置和语句的后面<br>B．C程序书写格式严格，要求一行内只能写一个语句<br>C．C程序书写格式自由，一个语句可以写在多行上<br>D．用C语言编写的程序只能放在一个程序文件中</p><p>【答案】C</p><p>【解析】C程序的注释可以出现在C程序的任何位置，注释符号：“//”或“/<em>…</em>/”，选项A错误。C程序中，一行内可写多个语句，每条语句用分号“；”结束，选项B错误，选项C正确。用C语言编写的程序可以放在多个程序文件中，用#include命令行实现文件包含功能，选项D错误。答案选择C选项。</p></blockquote><blockquote><p> 【中央财经大学2018研】以下叙述错误的是（　）。<br> A．在程序中凡是以“#”开始的语句行都是预处理命令行<br> B．预处理命令行的最后不能以分号表示结束<br> C．#include MAX是合法的宏定义命令行<br> D．C程序对预处理命令行的处理是在程序执行的过程中进行的</p><p> 【答案】D</p><p> 【解析】在C语言中，凡是以“#”开头的行都称为编译预处理命令行，为了区别C语句，后面是不加分号的。编译预处理是在编译程序对C源程序进行编译前执行的，而不是在程序执行过程中进行的。</p></blockquote><p><strong>注意：</strong></p><blockquote><p>学习编程最容易犯的错是<code>语法错误</code>。C语言要求必须按照语法规则编写代码。如果你的程序违反了语法规则，例如：忘记了分号、大括号、引号 或者拼错了单词等，C编译器都会报语法错误。<code>尝试着去看懂编译器会报告的错误信息</code>。</p></blockquote><h3 id="7、关于输出"><a href="#7、关于输出" class="headerlink" title="7、关于输出"></a>7、关于输出</h3><h4 id="7-1-printf-标准格式"><a href="#7-1-printf-标准格式" class="headerlink" title="7.1 printf()标准格式"></a>7.1 printf()标准格式</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span>格式控制字符串<span class="token punctuation">,</span>输出列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/04/image-20230822164051224.png" alt="image-20230822164051224"></p><p>其中，</p><ul><li><p><code>"格式控制字符串"</code>是用双引号括起来的一个字符串。包括：</p><ul><li>普通字符：普通字符即需要在输出时原样输出的字符。</li><li>占位符：由“%”和格式字符组成。这个位置可以用其它值代入。</li></ul></li><li><p><code>"输出列表"</code>是程序需要输出的一些数据，可以是常量、变量或表达式。用于替换占位符的位置。</p></li></ul><blockquote><p>注意：printf() 参数与占位符是一一对应关系。如果参数个数少于对应的占位符， printf() 可能会输出内存中的任意值。</p></blockquote><h4 id="7-2-占位符"><a href="#7-2-占位符" class="headerlink" title="7.2 占位符"></a>7.2 占位符</h4><p>占位符的第一个字符是 <code>%</code> ，第二个字符表示占位符的类型。</p><p>printf() 的占位符有许多种类，与 C 语言的数据类型相对应。</p><p>下面按照字母顺序，列出占位符如下，方便查阅(红色为常用的)：</p><blockquote><p>%a ：浮点数(仅C99有效)<br>%A ：浮点数(仅C99有效)<br><strong>%c ：char型数据</strong><br><strong>%d ：十进制整数(int)</strong><br>%e ：使用科学计数法的浮点数，指数部分的 e 为小写<br>%E ：使用科学计数法的浮点数，指数部分的 E 为大写<br>%i ：整数，基本等同于 %d<br><strong>%f ：浮点数(float)</strong><br>%g ：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的 e 为小写<br>%G ：等同于 %g ，唯一的区别是指数部分的 E 为大写<br>%hd ：十进制 short int 类型<br>%ho ：八进制 short int 类型<br>%hx ：十六进制 short int 类型<br>%hu ：unsigned short int 类型<br><strong>%ld ：十进制整数(long)</strong><br>%lo ：八进制 long int 类型<br>%lx ：十六进制 long int 类型<br>%lu ：unsigned long int 类型<br>%lld ：十进制 long long int 类型<br>%llo ：八进制 long long int 类型<br>%llx ：十六进制 long long int 类型<br>%llu ：unsigned long long int 类型<br>%le ：科学计数法表示的 long double 类型浮点数<br><strong>%lf ：十进制浮点数(double)</strong><br>%n ：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中<br>%o ：八进制整数<br><strong>%p ：指针</strong><br><strong>%s ：字符串</strong><br><strong>%u ：十进制无符号整数（unsigned int）</strong><br>%x ：十六进制整数<br>%zd ： size_t 类型<br>%% ：输出一个百分号</p></blockquote><h4 id="7-3-举例"><a href="#7-3-举例" class="headerlink" title="7.3 举例"></a>7.3 举例</h4><p><strong>举例1：%d</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count is %d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：count is 10  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"There are %i students\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出：There are 5 students</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例2：%lf 和 %f</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.1415926535f</span><span class="token punctuation">;</span>    <span class="token comment">// 单精度浮点数</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.1415926535</span><span class="token punctuation">;</span>  <span class="token comment">// 双精度浮点数</span><span class="token comment">// 使用 %f 输出单精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Float: %f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Float: 3.141593</span><span class="token comment">// 使用 %lf 输出双精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Double: %lf\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Double: 3.141593</span><span class="token comment">// 使用 %f 输出单精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Float: %.8f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Float: 3.14159274</span><span class="token comment">// 使用 %lf 输出双精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Double: %.8lf\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Double: 3.14159265</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例3：%c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> level <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this score level is:%c\n"</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：this score level is:A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>举例4：%s</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s是我最喜欢的冷门歌手.\n"</span><span class="token punctuation">,</span><span class="token string">"孙燕姿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：孙燕姿是我最喜欢的冷门歌手.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例5：多个占位符</strong></p><p>输出文本里面可以使用多个占位符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s有%d部手机\n"</span><span class="token punctuation">,</span> <span class="token string">"老板"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：老板有2部手机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-4-输出格式"><a href="#7-4-输出格式" class="headerlink" title="7.4 输出格式"></a>7.4 输出格式</h4><p>printf() 可以定制占位符的输出格式。</p><p><strong>格式1：限定宽度</strong></p><p>printf() 允许限定占位符的最小宽度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d\n"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出为 "  123" </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：%5d 表示这个占位符的宽度至少为5位。如果不满5位，对应的值的前面会添加空格。</p><p>输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 % 的后面插入一个 - 号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5d\n"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出为 "123  "</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于小数，这个限定符会限制所有数字的最小显示宽度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%12f\n"</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "  123.450000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>%12f 表示输出的浮点数最少要占据12位。由于小数的默认显示精度是小数点后6位，所以123.45 输出结果的头部会添加2个空格。</p><p><strong>格式2：总是显示正负号</strong></p><p>默认情况下， printf() 不对正数显示 + 号，只对负数显示 - 号。如果想让正数也输出 + 号，可以在占位符的 % 后面加一个 + 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%+d\n"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 +11</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%+d\n"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 -11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>格式3：限定小数位数</strong></p><p>输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成 %.2f 。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number is %.2f\n"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Number is 0.80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种写法可以与限定宽度占位符，结合使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6.2f\n"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出为 "  0.80"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：%6.2f 表示输出字符串最小宽度为6，小数位数为2。整体长度不足 6 位时，右对齐显示。</p><p>最小宽度和小数位数这两个限定值，都可以用 * 代替，通过 printf() 的参数传入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%*.*f\n"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6.2f\n"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p> 【华南理工大学2018研】十六进制形式输出整数的格式说明符是（　）。</p><p> A．%u<br> B．%ld<br> C．%x<br> D．%o</p><p> 【答案】C</p><p> 【解析】A表示输出的是无符号整型；B表示输出的是有符号长整型；D表示输出的是八进制。</p></blockquote><h3 id="8、练习"><a href="#8、练习" class="headerlink" title="8、练习"></a>8、练习</h3><p>练习1：开发一个 ILoveC.c 程序，可以输出 “某某 is studying c!”</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//printf("谷小妹 is studying C!\n");</span>    <span class="token comment">//printf("%s is studying C!\n","谷小妹");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习2：控制台打印：5 + 3 = 8</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//函数结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="附录：C-x2F-C-Single-File-Execution插件"><a href="#附录：C-x2F-C-Single-File-Execution插件" class="headerlink" title="附录：C/C++ Single File Execution插件"></a>附录：C/C++ Single File Execution插件</h3><p><strong>1、为何安装C/C++ Single File Execution插件？</strong></p><p>前面已经创建了一个demo1工程，项目文件夹内存在一个代码文件，名为<code>main.c</code>。如果再创建一个C源文件，内部如果也包含main()函数，则会报错！因为默认C工程下只能有一个main()函数。如何解决此问题呢？</p><p>2、安装并测试</p><p>1）在 File - Settings - Plugins 中搜索 <code>C/C++ Single File Execution</code> 插件并安装</p><p><img src="/../../images/04/image-20230823145107293.png" alt="image-20230823145107293"></p><p>2）在需要运行的代码中右键，点击 Add executable for single c/cpp file</p><p><img src="/../../images/04/1692774502830.png" alt="1692774502830"></p><p>3）此时可以在 Cmakelists.text 文件中看到多出的这一行代码，这就是插件帮我们完成的事情</p><p><img src="/../../images/04/1692774556495.png" alt="1692774556495"></p><p>4）右键项目文件夹，点击 Reload CMake Project 进行刷新</p><p><img src="/../../images/04/1692774575597.png" alt="1692774575597"></p><p>5）此时右上角标签处已经增加了我们的文件选项，选择需要的标签</p><p><img src="/../../images/04/1692774598633.png" alt="1692774598633"></p><p>6）点击小三角，或右键代码处点击 Run 选项，即可运行代码。</p><p><img src="/../../images/04/1692774678384.png" alt="1692774678384"></p><p>7）在该工程下创建main2.c文件，文件中的代码如下所示，执行上面相同的步骤。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World2!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现一个工程中允许存在多个main方法了，而且可以独立允许。</p>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react_fiber</title>
      <link href="/2024/04/14/02-react-yuan-ma/react-fiber/"/>
      <url>/2024/04/14/02-react-yuan-ma/react-fiber/</url>
      
        <content type="html"><![CDATA[<h1 id="fiber之前"><a href="#fiber之前" class="headerlink" title="fiber之前"></a>fiber之前</h1>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给定一个不重复的正整数集合A，从中取N个数字，使他们的和为M的所有可能</title>
      <link href="/2024/03/21/01-suan-fa/0001/"/>
      <url>/2024/03/21/01-suan-fa/0001/</url>
      
        <content type="html"><![CDATA[<h1 id="给定一个不重复的正整数集合A，从中取N个数字，使他们的和为M的所有可能。"><a href="#给定一个不重复的正整数集合A，从中取N个数字，使他们的和为M的所有可能。" class="headerlink" title="给定一个不重复的正整数集合A，从中取N个数字，使他们的和为M的所有可能。"></a>给定一个不重复的正整数集合A，从中取N个数字，使他们的和为M的所有可能。</h1><h2 id="一、故事的背景"><a href="#一、故事的背景" class="headerlink" title="一、故事的背景"></a>一、故事的背景</h2><blockquote><p>这道题曾是笔者在21年碰到的高频面试题，一些大厂非常喜欢考这道题，当时自己没有复盘在面试过程中中来来回回碰到了3次都被解决，故而痛定思痛，最终把这到题深深刻在自己的 <code>DNA</code>上，以思其过。</p></blockquote><h2 id="二、算法的前置知识"><a href="#二、算法的前置知识" class="headerlink" title="二、算法的前置知识"></a>二、算法的前置知识</h2><ul><li>二进制、位运算</li><li>剪枝的思想</li><li>时间、空间复杂度分析与优化</li></ul><h2 id="三、深入分析"><a href="#三、深入分析" class="headerlink" title="三、深入分析"></a>三、深入分析</h2><h3 id="3-1-降维分析、化繁为简"><a href="#3-1-降维分析、化繁为简" class="headerlink" title="3.1 降维分析、化繁为简"></a>3.1 降维分析、化繁为简</h3><p>首先我们从题干出发，题干信息很简单，核心问题在于</p><blockquote><p>如何从数组中选取 <code>N</code> 个数进行求和运算。</p></blockquote><p>假如 <code>N = 2</code> ，也就是找出数组中两个数的和为 <code>M</code> 的话，你可能会立马想到 <a href="https://leetcode.cn/problems/two-sum/description/">力扣</a> 中的第1题：两数和 的问题，即采用嵌套<code>for</code>循环的方式来解（时间复杂度<code>O(n^2)</code>，空间复杂度<code>O(1)</code>）。</p><p>但问题是 <code>N = 2</code> 或者 <code>N = 10+</code> 的话，会发现运算量越来越大，显然上面的方式已经行不通了。</p><p>我们不妨换个思想↓</p><p><strong>数组中选取不固定数值 <code>N</code> ，我们可以尝试着使用标记的方式，我们把 <code>1</code> 表示成选取状态， 把 <code>0</code> 表示成未选取状态。</strong></p><blockquote><p>假设我们有一个数组<code>arr = [1, 2, 3, 4]</code>，每一个元素都用 <code>0</code> 或  <code>1</code> 来标记，如果 <code>N=4</code> ，也就是在这个数组中，需要选择 <code>4</code> 个元素，那么对应的标记就只有一种可能 <code>1111</code> ，如果 <code>N=3</code> ，那就有 <code>4</code> 种可能，分别是 <code>1110</code> 、 <code>1101</code> 、<code>1011</code> 以及 <code>0111</code> 这 <code>4</code> 种可能。</p></blockquote><p>也就是说：</p><p><strong>标记中有几个 <code>1</code> 就是代表选取了几个数，然后再去遍历这些 <code>1</code> 所有可能存在的排列方式，最后做一个判断，这个判断就是：每一种排列方式，都代表着数组中不同位置的被选中的数的组合，所以这里就是将选中的这些数字，进行求和运算，然后判断求出的和是不是等于 <code>M</code> 。</strong></p><p>于是问题就变得简单了。</p><hr><h3 id="3-2-设计与数组的关联性"><a href="#3-2-设计与数组的关联性" class="headerlink" title="3.2 设计与数组的关联性"></a>3.2 设计与数组的关联性</h3><p>以上面的 <code>arr = [1, 2, 3, 4]</code> 为例，有 <code>4</code> 个元素，则我们选择元素的方式有从 <code>0000</code>（ <code>N = 0</code> ）到 <code>1111</code>( <code>N = 4</code> ) 的所有可能。而 <code>1111</code> 在二进制中对应的数字是<code>15</code>,也就是说在<code>N</code>不确定的情况,下我们选择的组合总共有<code>16</code>种。</p><p>这里我们采用位运算——&gt; <font color="#08e">左移</font> 运算。即<code>1 &lt;&lt; 4</code> 的结果为<code>16</code>。</p><blockquote><p>补充：如果<code>a</code>的二进制位<code>0111</code>, <code>a&lt;&lt;2</code>的结果为<code>11100</code>。</p></blockquote><p>对此，我们可以编码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用res盛放题目所有可能</span>    len <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>    bit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> len <span class="token comment">// 所有可能的数量</span><span class="token comment">// 这里忽略了 0 的情况(N = 0)，取值就是 1 - 15</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里解释下为何我们要用<code>位运算</code>：由于我们考虑的是最优解，而位运算直接用二进制进行表示，计算机省去了中间过程的各种复杂转换，从而提高了速度。</p></blockquote><h3 id="3-3-设计二进制数中1的个数的功能函数"><a href="#3-3-设计二进制数中1的个数的功能函数" class="headerlink" title="3.3 设计二进制数中1的个数的功能函数"></a>3.3 设计二进制数中<code>1</code>的个数的功能函数</h3><p>首先补充下<code>位运算</code>的规则↓</p><blockquote><p>&amp; 按位与(遇0则0)<br>例子：var a=7,b=11;  a &amp; b的结果是？<br>a的二进制是0111，b的二进制是1011<br>规则：0对1、1对0、0对0==&gt;结果为0<br>1对1 ==&gt;结果为1<br>结果：<br> 0 1 1 1</p><p>1 0 1 1</p><p>0 0 1 1  ==&gt; 等于3<br>| 按位或(遇1则1)<br>规则：0对1、1对0、1对1==&gt;结果为1<br>0对0 ==&gt;结果为0</p></blockquote><p><strong>我们可以建立一个迭代，通过统计消除的次数，就能确定最终有几个 <code>1</code> 了。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 用于计算二进制中1的数量 * @param {number} num 当前二进制对应的数字  * @returns  */</span><span class="token keyword">const</span> <span class="token function-variable function">n</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">&amp;=</span> num <span class="token operator">-</span> <span class="token number">1</span>        count<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-设计计算和为M"><a href="#3-3-设计计算和为M" class="headerlink" title="3.3 设计计算和为M"></a>3.3 设计计算和为<code>M</code></h3><p>上一节中我们已经筛选出所有取<code>N</code>个数字的所有排列，这时我们还需要再次筛选，即：我们需要从第一次筛选的排列中找到和为<code>M</code>的所有组合，而这些组合就是我们的答案。</p><p>那么问题来了，我们如何去找出这些数呢？答案还是通过<code>左移</code>。</p><blockquote><p>比如：<code>14</code> 的二进制表示为 <code>1110</code>，其代表（从右往左）选取了第 <code>2</code> , <code>3</code> , <code>4</code> 位。</p><p>1110 &amp; 0001（1&lt;&lt;0） === 0000   等与0，第一位不选取</p><p>1110 &amp; 0010 （1&lt;&lt;1）=== 0010  不等于0，第二位选取</p><p>1110 &amp; 0100 （1&lt;&lt; 2) === 0100  不等于0，第三位选取</p><p>1110 &amp; 1000 （1&lt;&lt;3）=== 1000  不等于0，第四位选取</p></blockquote><p>所以我们可以推出第二次筛选的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 所以， 1110 对应着 第一位没有选取，那么 1110 &amp; 0001(设置为第一位的位掩码) = 0，如果 i &amp; (1 &lt;&lt; inx) !== 0 代表该位被选取了</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 代表这个数被选取了，我们做累加求和就行</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-得出结果"><a href="#3-4-得出结果" class="headerlink" title="3.4 得出结果"></a>3.4 得出结果</h3><p>最终，我们的代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">M</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * 用于计算二进制中1的数量   * @param {number} num 当前二进制对应的数字    * @returns    */</span>  <span class="token keyword">const</span> <span class="token function-variable function">n</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      num <span class="token operator">&amp;=</span> num <span class="token operator">-</span> <span class="token number">1</span>      count<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count  <span class="token punctuation">}</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    len <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>    bit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> len  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          s <span class="token operator">+=</span> <span class="token constant">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>          temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> <span class="token constant">M</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-复杂度分析"><a href="#3-5-复杂度分析" class="headerlink" title="3.5 复杂度分析"></a>3.5 复杂度分析</h3><ul><li><p><font color="#f90">时间复杂度：</font></p><ul><li><code>n(num)</code> 函数用于计算一个数字在二进制表示中1的个数。它使用了<code>num &amp;= num - 1</code>这个技巧来消除最低位的1，直到<code>num</code>变为0。每次循环，<code>num</code>至少减少一个1，因此最多循环<code>num</code>中1的个数次。在最坏情况下，<code>num</code>是一个全1的二进制数，即<code>2^len - 1</code>，其中<code>len</code>是集合A的长度。因此，<code>n(num)</code>的时间复杂度是O(n)。</li><li>外层循环<code>for (let i = 1; i &lt; bit; i++)</code>遍历了所有可能的子集，其中<code>bit = 1 &lt;&lt; len</code>，即<code>2^len</code>。因此，外层循环的次数是<code>2^n</code>。</li><li>内层循环<code>for (let j = 0; j &lt; len; j++)</code>对于每个<code>i</code>，都遍历了集合A的所有元素，所以它的时间复杂度是O(n)。</li></ul><p>综上所述，总的时间复杂度是外层循环的次数乘以内层循环的次数再乘以<code>n(num)</code>的时间复杂度，即O(len * 2^len * len) = O(n^2 * 2^n)。</p></li><li><p><font color="#f90">空间复杂度：</font></p><ul><li><code>res</code>数组用于存储所有满足条件的子集，其最大长度取决于满足条件的子集数量。在最坏情况下，所有<code>2^len</code>个子集中可能有多个满足条件，因此<code>res</code>的空间复杂度可能是O(2^len)，但这取决于实际满足条件的子集数量。</li><li><code>temp</code>数组用于存储当前正在检查的子集，其长度最多为<code>len</code>，因此它的空间复杂度是O(n)。</li><li><code>n(num)</code>函数中的<code>count</code>变量和循环中的其他局部变量占用的空间是常量级的，可以忽略不计。</li></ul><p>因此，空间复杂度主要由<code>res</code>数组决定，如果考虑最坏情况，则是O(2^n)。如果考虑平均情况或实际情况（满足条件的子集数量较少），则空间复杂度可能会低于O(2^n)。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识</title>
      <link href="/2023/06/05/03-python-xue-xi/python-zong-bi-ji/"/>
      <url>/2023/06/05/03-python-xue-xi/python-zong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h1><h2 id="1-1-Python的起源"><a href="#1-1-Python的起源" class="headerlink" title="1.1 Python的起源"></a>1.1 Python的起源</h2><ul><li>1989年，为了打发圣诞节假期，Gudio van Rossum 吉多·范罗苏姆（龟叔）觉醒开发一个新的解释程序。</li><li>1991你那，第一个Python解释器诞生。</li><li>Python这个名字，来自龟叔所致爱的电视剧<code>Monty Python's Flying Circus</code></li></ul><h2 id="1-2-为什么选择python"><a href="#1-2-为什么选择python" class="headerlink" title="1.2 为什么选择python"></a>1.2 为什么选择python</h2><table><thead><tr><th>人群</th><th>用Python做什么</th></tr></thead><tbody><tr><td>IT从业者</td><td>自动化脚本（运维开发、测试开发等）</td></tr><tr><td>普通白领</td><td>自动化办公</td></tr><tr><td>后端开发</td><td>Web引用程序</td></tr><tr><td>科学家</td><td>基于Python完成数据计算（生物、化学、物理）</td></tr><tr><td><strong>人工智能/机器学习</strong></td><td><strong>基于Python开发AI程序</strong></td></tr><tr><td><strong>大数据开发</strong></td><td><strong>基于Python完成大数据任务开发（Spark、Flink）</strong></td></tr></tbody></table><h2 id="1-2安装Python"><a href="#1-2安装Python" class="headerlink" title="1.2安装Python"></a>1.2安装Python</h2><p><a href="https://www.python.org/">python官网</a></p><p>注意事项：<font color="red">安装的时候移动要勾选下图所示的框</font></p><p><img src="/../../images/03/01%E3%80%81%E5%AE%89%E8%A3%85.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react18源码解读</title>
      <link href="/2023/06/05/02-react-yuan-ma/react-react18/"/>
      <url>/2023/06/05/02-react-yuan-ma/react-react18/</url>
      
        <content type="html"><![CDATA[<h2 id="一、写在开头"><a href="#一、写在开头" class="headerlink" title="一、写在开头"></a>一、写在开头</h2><p>首先让我们从源头开始出发</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        hello&lt;span style=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">&gt;world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react整体渲染过程主要用到了两个方法，即 <code>createRoot</code> 和 <code>render</code> 方法，createRoot方法主要是创建根 Fiber 与其真实DOM根节点之间的联系；而<code>render</code> 方法负责Fiber树的生成以及将Fiber树变成真实DOM树并渲染的一个过程。</p><h2 id="二、createRoot方法主要做了什么？"><a href="#二、createRoot方法主要做了什么？" class="headerlink" title="二、createRoot方法主要做了什么？"></a>二、createRoot方法主要做了什么？</h2><h3 id="2-1-大致流程"><a href="#2-1-大致流程" class="headerlink" title="2.1  大致流程"></a>2.1  大致流程</h3><ol><li>通过<code>createContainer</code> 方法创建<strong>FiberNode</strong>的一个根实例，即<font color="#f00">未初始化的根Fiber</font>。</li><li>建立 <code>FiberRootNode</code>与 <code>HostRootFiber</code>之间的联系。</li><li>初始化循环队列。</li><li>返回 <code>FiberRootNode</code>。</li></ol><blockquote><p>附上完整的实现方法</p></blockquote><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里的root即构造函数FiberRootNode的一个实例,相当于根Fiber</span>    <span class="token comment">// FiberRootNode里面有一个containerInfo属性，this.containerInfo ==&gt; div#root</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Fiber挂载到ReactDOMRoot的实例的一个属性_internalRoot上</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactDOMRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#f00">注意：下面的代码是<strong>createRoot</strong>核心做的事情</font></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// containerInfo ==&gt; div#root</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// HostRoot指的就是根节点div#root,HostRootFiber代表根Fiber</span>    <span class="token keyword">const</span> uninitializedFiber <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根容器的current指向当前的根容器(根fiber)现在正在显示或者已经渲染好的fiber树</span>    root<span class="token punctuation">.</span>current <span class="token operator">=</span> uninitializedFiber<span class="token punctuation">;</span>    <span class="token comment">// 根fiber的stateNode,也就是真实dom节点指向FiberRootNode</span>    uninitializedFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 开始初始化更新队列</span>    <span class="token function">initialUpdateQueue</span><span class="token punctuation">(</span>uninitializedFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#08e">根Fiber大致长这个样↓</font></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/** * * @param {*} tag fiber的类型 函数组件0 类组件1 原生组件5 根元素3 * @param {*} pendingProps 新属性，等待处理或者说生效的属性 * @param {*} key 唯一标识 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// fiber类型，来自于虚拟DOM节点的type, span div p</span>    <span class="token comment">// 每个虚拟DOM =&gt; Fiber节点 =&gt; 真实DOM</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 此fiber对应的真实dom节点 h1 =&gt; 真实的h1 DOM</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向父节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个子节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向next弟弟节点</span>    <span class="token comment">// fiber哪来的？通过虚拟DOM节点创建，虚拟DOM会提供pendingProps用来创建fiber节点的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span> <span class="token comment">// 等待生效的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 已经生效的属性</span>    <span class="token comment">// 每个fiber还会有自己的状态，每一种fiber状态的类型是不一样的</span>    <span class="token comment">// 类组件对应的fiber存的就是类的实例的状态，HostRoot存的就是要渲染的元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 每个fiber身上可能还有更新队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>undateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 自身副作用的标识，表示要针对此fiber节点的进行何种操作</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span> <span class="token comment">// 自己的副作用</span>    <span class="token comment">// 子节点对应的副作用使用标识，主要是为了提升性能(eg:如果副作用标识是0，那么后面的子节点就不用递归计算了)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subtreeFlags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>    <span class="token comment">// 替身(相当于使用了双缓存技术或者说是预加载技术)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 默认索引值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>HostRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是初始化循环队列的方法</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initialUpdateQueue</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个新的更新队列</span>    <span class="token comment">// pending其实是一个循环链表</span>    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">{</span>        shared<span class="token operator">:</span> <span class="token punctuation">{</span>            pending<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-图文解析"><a href="#2-2-图文解析" class="headerlink" title="2.2 图文解析"></a>2.2 图文解析</h3><p><img src="/../images/02/01%E3%80%81createFiber.jpg" alt="createfiber结构图"></p><p><img src="/../images/02/02%E3%80%81createRoot%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="createfiber细节图"></p>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序章</title>
      <link href="/2023/05/20/00-xu-zhang/hello-world/"/>
      <url>/2023/05/20/00-xu-zhang/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h1><p>不知不觉从19年毕业直到现在，从事着web前端开发这块也有好几年的时间了。</p><p>在此期间大大小小的笔记也做了蛮多，</p><p>从最初用的有道笔记、到现在用到的csdn、语雀、知乎、github，</p><p>才发现自己写的东西已经不知道去哪个平台回顾了（主要是懒 ^ ^）</p><p>为此思来思去，经过这几天的折腾，终于把自己的个人网站搭建起来了；</p><p>接下来的这几个月，我会针对于自己所学的知识把大前端各个分支进行分类与整合并发布到这个网站上来。</p><p>学习与写博客是一件持之以恒的事情，</p><p>这也是不断督促自己前进的一种方式；</p><p>就让我们开始行动起来吧~</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'here we go'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
